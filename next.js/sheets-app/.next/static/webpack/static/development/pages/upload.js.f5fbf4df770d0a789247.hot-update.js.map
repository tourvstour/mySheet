{"version":3,"file":"static/webpack/static\\development\\pages\\upload.js.f5fbf4df770d0a789247.hot-update.js","sources":["webpack:///./components/uploadComp.jsx"],"sourcesContent":["import React, { Component } from 'react'\r\nimport readXlsxFile from 'read-excel-file'\r\nimport { Upfile, TranSport } from '../apis/datas'\r\nimport { Button, DatePicker, Select, Card, Table } from 'antd'\r\nimport 'antd/dist/antd.css';\r\n\r\nconst { Option } = Select\r\nconst columns = [{\r\n  title: 'วันที่',\r\n  dataIndex: 'dates',\r\n  key: 'dates',\r\n}, {\r\n  title: 'เลขพัสดุ',\r\n  dataIndex: 'number',\r\n  key: 'number',\r\n}, {\r\n  title: 'ราคาสินค้า\t',\r\n  dataIndex: 'price',\r\n  key: 'price',\r\n}, {\r\n  title: 'ชื่อลูกค้า',\r\n  dataIndex: 'customer',\r\n  key: 'customer',\r\n}, {\r\n  title: 'ที่อยู่จัดส่งพัสดุ',\r\n  dataIndex: 'address',\r\n  key: 'address',\r\n}, {\r\n  title: 'รหัสไปรษณี',\r\n  dataIndex: 'post',\r\n  key: 'post',\r\n}, {\r\n  title: 'เบอร์ติดต่อ',\r\n  dataIndex: 'phone',\r\n  key: 'phone',\r\n},\r\n]\r\nclass ComponentUpload extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      file: [],\r\n      tranSportList: [],\r\n      dateSelect: [],\r\n      transportSelect: []\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    new Promise((resolve, rejects) => {\r\n      resolve(TranSport())\r\n    }).then(res => {\r\n      this.setState({\r\n        tranSportList: res\r\n      })\r\n    })\r\n  }\r\n  importExcel = () => {\r\n    const input = document.getElementById('file')\r\n    let result = []\r\n    readXlsxFile(input.files[0], {})\r\n      .then(res => {\r\n        res.forEach(arr => {\r\n          let arr0 = new Date(arr[0]).toDateString(),\r\n            arr1 = arr[1],\r\n            arr2 = arr[2],\r\n            arr3 = arr[3],\r\n            arr4 = arr[4],\r\n            arr5 = arr[5],\r\n            arr6 = arr[6]\r\n          result.push({\r\n            dates: arr0,\r\n            number: arr1,\r\n            price: arr2,\r\n            customer: arr3,\r\n            address: arr4,\r\n            post: arr5,\r\n            phone: arr6\r\n          })\r\n        })\r\n        var fill = result.filter((result) => {\r\n          return result.number !== \"เลขพัสดุ\"\r\n        })\r\n        console.log(fill)\r\n        this.setState({\r\n          file: fill\r\n        })\r\n      })\r\n  }\r\n\r\n  Upload = () => {\r\n    let excel = this.state.file,\r\n      user = '1234',\r\n      date = this.state.dateSelect.toString(),\r\n      transport_comp = this.state.transportSelect.toString()\r\n    if (excel.length > 0) {\r\n      new Promise((resolve, rejects) => {\r\n        var a = Upfile(user, date, transport_comp, excel)\r\n        resolve(a)\r\n      }).then(res => {\r\n        console.log(res)\r\n      })\r\n        .catch(err => { console.log(err) })\r\n    }\r\n  }\r\n\r\n  TranSportSelect = (value) => {\r\n    console.log(value)\r\n    this.setState({\r\n      transportSelect: value\r\n    })\r\n  }\r\n\r\n  DateChange = (date, dateString) => {\r\n    console.log(dateString)\r\n    this.setState({\r\n      dateSelect: dateString\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Card>\r\n          <input type=\"file\" id=\"file\" onChange={this.importExcel} />\r\n          <br />\r\n          <DatePicker onChange={this.DateChange} />\r\n          <br />\r\n          <Select\r\n            style={{ width: 200 }}\r\n            onChange={this.TranSportSelect}\r\n          >\r\n            {this.state.tranSportList.map((data, index) => (\r\n              <Option key={index} value={data.transport_company_number}>{data.transport_company_name}</Option>\r\n            ))}\r\n          </Select>\r\n          <br />\r\n          <br />\r\n          <Table columns={columns} dataSource={this.state.file} />\r\n          <br />\r\n          <Button block onClick={this.Upload}>upload</Button>\r\n        </Card>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ComponentUpload\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AACA;AAKA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAoBA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AAnDA;AAqDA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAnEA;AAqEA;AACA;AAAA;AACA;AADA;AAGA;AACA;AA1EA;AA4EA;AACA;AAAA;AACA;AADA;AAGA;AACA;AA/EA;AACA;AACA;AACA;AACA;AAJA;AAFA;AAQA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;;;AA+DA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AA1GA;AACA;AA4GA;;;;A","sourceRoot":""}