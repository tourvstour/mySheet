{"ast":null,"code":"var _JSON$stringify = require(\"@babel/runtime-corejs2/core-js/json/stringify\");\n\nvar url = 'http://192.168.59.25:2000';\nvar upload = '/upload',\n    payback = \"/payback\",\n    regiter = \"/regiter\",\n    transport = '/transport',\n    allOrder = '/allorder',\n    waitingOrder = '/waitingOrder',\n    payBackOrder = '/payBackOrder',\n    absent = '/absent',\n    excess = '/excess'; //อัพโหลดไฟลexcel waiting\n\nexports.Upfile = (user, transport_comp, excel) => {\n  return fetch(url + upload, {\n    method: \"POST\",\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: _JSON$stringify({\n      user: user,\n      transport_comp: transport_comp,\n      excel: excel\n    })\n  }).then(res => res.json()).then(res => {\n    return res;\n  });\n}; //อัพโหลดไฟลexcel payback\n\n\nexports.Payback = (user, transport_comp, excel) => {\n  return fetch(url + payback, {\n    method: \"POST\",\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: _JSON$stringify({\n      user: user,\n      transport_comp: transport_comp,\n      excel: excel\n    })\n  }).then(res => res.json()).then(res => {\n    return res;\n  });\n}; //`บริษัทขนส่ง\n\n\nexports.TranSport = () => {\n  return fetch(url + transport, {\n    method: \"POST\"\n  }).then(res => res.json()).then(res => {\n    return res;\n  });\n}; //Reports \n\n\nexports.AllOrders = user => {\n  return fetch(url + allOrder, {\n    method: \"POST\",\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: _JSON$stringify({\n      user: user\n    })\n  }).then(res => res.json()).then(res => {\n    return res;\n  });\n};\n\nexports.WaitingOrders = user => {\n  return fetch(url + waitingOrder, {\n    method: \"POST\",\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: _JSON$stringify({\n      user: user\n    })\n  }).then(res => res.json()).then(res => {\n    return res;\n  });\n};\n\nexports.PayBackOrders = user => {\n  return fetch(url + payBackOrder, {\n    method: \"POST\",\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: _JSON$stringify({\n      user: user\n    })\n  }).then(res => res.json()).then(res => {\n    return res;\n  });\n};\n\nexports.Excess = user => {\n  return fetch(url + excess, {\n    method: \"POST\",\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: _JSON$stringify({\n      user: user\n    })\n  }).then(res => res.json()).then(res => {\n    return res;\n  });\n};\n\nexports.Absent = user => {\n  return fetch(url + absent, {\n    method: \"POST\",\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: _JSON$stringify({\n      user: user\n    })\n  }).then(res => res.json()).then(res => {\n    return res;\n  });\n}; //Regit\n\n\nexports.Regit = dataRegit => {\n  return fetch(url + regiter, {\n    method: \"POST\",\n    headers: {\n      \"Accept\": \"application/json\",\n      'Content-Type': \"application/json\"\n    },\n    body: _JSON$stringify({\n      dataRegit: dataRegit\n    })\n  }).then(res => res.json()).then(res => {\n    return res;\n  });\n}; //Login\n\n\nexports.Login = (user, pass) => {\n  let userName = user,\n      passWord = pass;\n  return fetch(url + DOMSettableTokenList, {\n    method: \"POST\",\n    headers: {\n      \"Accept\": \"application/json\",\n      'Content-Type': \"application/json\"\n    },\n    body: _JSON$stringify({\n      user: userName,\n      pass: passWord\n    })\n  }).then(res => res.json()).then(res => {\n    return res;\n  });\n};","map":{"version":3,"sources":["D:/projext/next.js/sheets-app/apis/datas.jsx"],"names":["url","upload","payback","regiter","transport","allOrder","waitingOrder","payBackOrder","absent","excess","exports","Upfile","user","transport_comp","excel","fetch","method","headers","body","then","res","json","Payback","TranSport","AllOrders","WaitingOrders","PayBackOrders","Excess","Absent","Regit","dataRegit","Login","pass","userName","passWord","DOMSettableTokenList"],"mappings":"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","sourcesContent":["var url = 'http://192.168.59.25:2000'\r\nvar upload = '/upload',\r\n    payback = \"/payback\",\r\n    regiter = \"/regiter\",\r\n    transport = '/transport',\r\n    allOrder = '/allorder',\r\n    waitingOrder = '/waitingOrder',\r\n    payBackOrder = '/payBackOrder',\r\n    absent = '/absent',\r\n    excess = '/excess'\r\n\r\n//อัพโหลดไฟลexcel waiting\r\nexports.Upfile = (user, transport_comp, excel) => {\r\n    return fetch(url + upload, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            user: user,\r\n            transport_comp: transport_comp,\r\n            excel: excel\r\n        })\r\n    }).then(res => res.json())\r\n        .then(res => {\r\n            return res\r\n        })\r\n}\r\n//อัพโหลดไฟลexcel payback\r\nexports.Payback = (user, transport_comp, excel) => {\r\n    return fetch(url + payback, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            user: user,\r\n            transport_comp: transport_comp,\r\n            excel: excel\r\n        })\r\n    }).then(res => res.json())\r\n        .then(res => {\r\n            return res\r\n        })\r\n}\r\n\r\n//`บริษัทขนส่ง\r\nexports.TranSport = () => {\r\n    return fetch(url + transport, {\r\n        method: \"POST\"\r\n    })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            return res\r\n        })\r\n}\r\n\r\n\r\n//Reports \r\nexports.AllOrders = (user) => {\r\n    return fetch(url + allOrder, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            user: user\r\n        })\r\n    })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            return res\r\n        })\r\n}\r\nexports.WaitingOrders = (user) => {\r\n    return fetch(url + waitingOrder, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            user: user\r\n        })\r\n    })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            return res\r\n        })\r\n}\r\nexports.PayBackOrders = (user) => {\r\n    return fetch(url + payBackOrder, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            user: user\r\n        })\r\n    })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            return res\r\n        })\r\n}\r\nexports.Excess = (user) => {\r\n    return fetch(url + excess, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            user: user\r\n        })\r\n    })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            return res\r\n        })\r\n}\r\nexports.Absent = (user) => {\r\n    return fetch(url + absent, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            user: user\r\n        })\r\n    })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            return res\r\n        })\r\n}\r\n//Regit\r\nexports.Regit = (dataRegit) => {\r\n    return fetch(url + regiter, {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Accept\": \"application/json\",\r\n            'Content-Type': \"application/json\",\r\n        },\r\n        body:JSON.stringify({\r\n            dataRegit:dataRegit\r\n        })\r\n    }).then(res=>res.json())\r\n    .then(res=>{\r\n        return res\r\n    })\r\n}\r\n//Login\r\nexports.Login = (user, pass) => {\r\n    let userName = user,\r\n        passWord = pass\r\n    return fetch(url + DOMSettableTokenList, {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Accept\": \"application/json\",\r\n            'Content-Type': \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n            user: userName,\r\n            pass: passWord\r\n        })\r\n    }).then(res => res.json())\r\n        .then(res => {\r\n            return res\r\n        })\r\n}"]},"metadata":{},"sourceType":"script"}