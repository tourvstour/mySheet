{"ast":null,"code":"import _Card from \"antd/lib/card\";\nimport _Button from \"antd/lib/button\";\nimport _Form from \"antd/lib/form\";\nimport _Input from \"antd/lib/input\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"D:\\\\react\\\\webs\\\\next.js\\\\sheets-app\\\\components\\\\Comp_regiter.jsx\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport 'antd/dist/antd.css';\n\nvar Comp_regit =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Comp_regit, _Component);\n\n  function Comp_regit() {\n    var _this;\n\n    _classCallCheck(this, Comp_regit);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Comp_regit).call(this));\n\n    _defineProperty(_assertThisInitialized(_this), \"Regit\", function (e) {\n      var email = document.getElementById('email'),\n          password = document.getElementById('password'),\n          confirm_password = document.getElementById('confirm'),\n          store = document.getElementById('store'),\n          phone = document.getElementById('phone');\n\n      if (email.value.includes('@') === true) {\n        _this.setState({\n          emailHelp: \"\",\n          emailStatus: 'success'\n        });\n      } else if (email.value.includes('@') === false) {\n        _this.setState({\n          emailHelp: \"รูปแบบemailไม่ถูกต้อง\",\n          emailStatus: 'error'\n        });\n      } else if (password.value === \"\") {} else {\n        var dateRegiter = [{\n          \"email\": email.value,\n          \"passWord\": password.value,\n          \"confirmPassword\": confirm_password.value,\n          \"store\": store.value,\n          \"phone\": phone.value\n        }];\n\n        _this.setState({\n          dateRegiter: dateRegiter\n        });\n      }\n    });\n\n    _this.state = {\n      dateRegiter: [],\n      emailHelp: '',\n      emailStatus: '',\n      passHelp: '',\n      passStatus: '',\n      confHelp: '',\n      confStatus: ''\n    };\n    return _this;\n  }\n\n  _createClass(Comp_regit, [{\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, __jsx(_Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, __jsx(_Form, {\n        layout: \"vertical\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, __jsx(_Form.Item, {\n        label: \"E-mail\",\n        validateStatus: this.state.emailStatus,\n        help: this.state.emailHelp,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, __jsx(_Input, {\n        type: \"email\",\n        id: 'email',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      })), __jsx(_Form.Item, {\n        label: \"Password\",\n        validateStatus: this.state.passStatus,\n        help: this.state.passHelp,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, __jsx(_Input.Password, {\n        id: \"password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      })), __jsx(_Form.Item, {\n        label: \"Confirm Password\",\n        validateStatus: this.state.confStatus,\n        help: this.state.confHelp,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, __jsx(_Input.Password, {\n        id: \"confirm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      })), __jsx(_Form.Item, {\n        label: \"ชื่อร้านค้า\",\n        validateStatus: this.state.storeStatus,\n        help: this.state.storeHelp,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, __jsx(_Input, {\n        id: \"store\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      })), __jsx(_Form.Item, {\n        label: \"เบอร์โทร\",\n        validateStatus: this.state.phoneStatus,\n        help: this.state.phoneHelp,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, __jsx(_Input, {\n        id: \"phone\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      })), __jsx(_Form.Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, __jsx(_Button, {\n        onClick: this.Regit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, \"Regiter\")))));\n    }\n  }]);\n\n  return Comp_regit;\n}(Component);\n\nexport default Comp_regit;","map":{"version":3,"sources":["D:/react/webs/next.js/sheets-app/components/Comp_regiter.jsx"],"names":["React","Component","Comp_regit","e","email","document","getElementById","password","confirm_password","store","phone","value","includes","setState","emailHelp","emailStatus","dateRegiter","state","passHelp","passStatus","confHelp","confStatus","storeStatus","storeHelp","phoneStatus","phoneHelp","Regit"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport { Input, Button, Card, Form, InputNumber } from 'antd'\r\nimport 'antd/dist/antd.css'\r\n\r\nclass Comp_regit extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            dateRegiter:[],\r\n            \r\n            emailHelp: '',\r\n            emailStatus: '',\r\n\r\n            passHelp: '',\r\n            passStatus: '',\r\n\r\n            confHelp: '',\r\n            confStatus: ''\r\n        }\r\n    }\r\n    Regit = (e) => {\r\n        let email = document.getElementById('email'),\r\n            password = document.getElementById('password'),\r\n            confirm_password = document.getElementById('confirm'),\r\n            store = document.getElementById('store'),\r\n            phone = document.getElementById('phone')\r\n\r\n        if (email.value.includes('@') === true) {\r\n            this.setState({\r\n                emailHelp: \"\",\r\n                emailStatus: 'success'\r\n            })\r\n        }\r\n        else if (email.value.includes('@') === false) {\r\n            this.setState({\r\n                emailHelp: \"รูปแบบemailไม่ถูกต้อง\",\r\n                emailStatus: 'error'\r\n            })\r\n        }\r\n        else if (password.value === \"\") {\r\n\r\n        } else {\r\n            let dateRegiter = [{\r\n                \"email\": email.value,\r\n                \"passWord\": password.value,\r\n                \"confirmPassword\": confirm_password.value,\r\n                \"store\": store.value,\r\n                \"phone\": phone.value\r\n            }]\r\n\r\n            this.setState({\r\n                dateRegiter:dateRegiter\r\n            })\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Card>\r\n                    <Form layout=\"vertical\" >\r\n                        <Form.Item label={\"E-mail\"} validateStatus={this.state.emailStatus} help={this.state.emailHelp}>\r\n                            <Input type={\"email\"} id={'email'} />\r\n                        </Form.Item>\r\n                        <Form.Item label={\"Password\"} validateStatus={this.state.passStatus} help={this.state.passHelp}>\r\n                            <Input.Password id={\"password\"} />\r\n                        </Form.Item>\r\n                        <Form.Item label={\"Confirm Password\"} validateStatus={this.state.confStatus} help={this.state.confHelp}>\r\n                            <Input.Password id={\"confirm\"} />\r\n                        </Form.Item>\r\n                        <Form.Item label={\"ชื่อร้านค้า\"} validateStatus={this.state.storeStatus} help={this.state.storeHelp}>\r\n                            <Input id={\"store\"} />\r\n                        </Form.Item>\r\n                        <Form.Item label={\"เบอร์โทร\"} validateStatus={this.state.phoneStatus} help={this.state.phoneHelp}>\r\n                            <Input id={\"phone\"} />\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button onClick={this.Regit}>Regiter</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Comp_regit"]},"metadata":{},"sourceType":"module"}