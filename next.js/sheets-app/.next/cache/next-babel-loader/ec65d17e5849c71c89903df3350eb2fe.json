{"ast":null,"code":"import _Button from \"antd/lib/button\";\nimport _DatePicker from \"antd/lib/date-picker\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _Select from \"antd/lib/select\";\nvar _jsxFileName = \"F:\\\\Web\\\\next.js\\\\sheets-app\\\\components\\\\uploadComp.jsx\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport readXlsxFile from 'read-excel-file';\nimport { Upfile, TranSport } from '../apis/datas';\nimport 'antd/dist/antd.css';\nconst {\n  Option\n} = _Select;\n\nclass ComponentUpload extends Component {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"importExcel\", () => {\n      const input = document.getElementById('file');\n      let result = [];\n      readXlsxFile(input.files[0], {}).then(res => {\n        res.forEach(arr => {\n          let arr1 = arr[0],\n              arr2 = arr[1],\n              arr3 = arr[2],\n              arr4 = arr[3],\n              arr5 = arr[4],\n              arr6 = arr[5];\n          result.push({\n            cel1: arr1,\n            cel2: arr2,\n            cel3: arr3,\n            cel4: arr4,\n            cel5: arr5,\n            cel6: arr6\n          });\n        }); // console.log(result)\n\n        this.setState({\n          file: result\n        });\n      });\n    });\n\n    _defineProperty(this, \"Upload\", () => {\n      let excel = this.state.file,\n          user = '1234',\n          date = '2019-10-13',\n          transport_comp = \"1\";\n\n      if (excel.length > 0) {\n        new _Promise((resolve, rejects) => {\n          var a = Upfile(user, date, transport_comp, excel);\n          resolve(a);\n        }).then(res => {\n          console.log(res);\n        }).catch(err => {\n          console.log(err);\n        });\n      }\n    });\n\n    this.state = {\n      file: [],\n      tranSportList: []\n    };\n  }\n\n  componentDidMount() {\n    new _Promise((resolve, rejects) => {\n      resolve(TranSport());\n    }).then(res => {\n      this.setState({\n        tranSportList: res\n      });\n    });\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, __jsx(\"input\", {\n      type: \"file\",\n      id: \"file\",\n      onChange: this.importExcel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), __jsx(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), __jsx(_DatePicker, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), __jsx(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), __jsx(_Select, {\n      style: {\n        width: 200\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, this.state.tranSportList.map((data, index) => __jsx(Option, {\n      key: index,\n      value: data.transport_company_number,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, data.transport_company_name))), __jsx(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }), __jsx(_Button, {\n      onClick: this.Upload,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"upload\"), __jsx(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }), __jsx(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, this.state.file.map((key, data_key) => __jsx(\"tr\", {\n      key: data_key,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, __jsx(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, key.cel1), __jsx(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, key.cel2), __jsx(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, key.cel3), __jsx(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, key.cel4), __jsx(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, key.cel5)))));\n  }\n\n}\n\nexport default ComponentUpload;","map":{"version":3,"sources":["F:\\Web\\next.js\\sheets-app\\components\\uploadComp.jsx"],"names":["React","Component","readXlsxFile","Upfile","TranSport","Option","ComponentUpload","constructor","input","document","getElementById","result","files","then","res","forEach","arr","arr1","arr2","arr3","arr4","arr5","arr6","push","cel1","cel2","cel3","cel4","cel5","cel6","setState","file","excel","state","user","date","transport_comp","length","resolve","rejects","a","console","log","catch","err","tranSportList","componentDidMount","render","importExcel","width","map","data","index","transport_company_number","transport_company_name","Upload","key","data_key"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport readXlsxFile from 'read-excel-file'\r\nimport { Upfile, TranSport } from '../apis/datas'\r\nimport { Button, DatePicker, Select } from 'antd'\r\nimport 'antd/dist/antd.css';\r\n\r\nconst { Option } = Select\r\nclass ComponentUpload extends Component {\r\n\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      file: [],\r\n      tranSportList: []\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    new Promise((resolve, rejects) => {\r\n      resolve(TranSport())\r\n    }).then(res => {\r\n      this.setState({\r\n        tranSportList: res\r\n      })\r\n    })\r\n  }\r\n  importExcel = () => {\r\n    const input = document.getElementById('file')\r\n    let result = []\r\n    readXlsxFile(input.files[0], {})\r\n      .then(res => {\r\n        res.forEach(arr => {\r\n          let arr1 = arr[0],\r\n            arr2 = arr[1],\r\n            arr3 = arr[2],\r\n            arr4 = arr[3],\r\n            arr5 = arr[4],\r\n            arr6 = arr[5]\r\n          result.push({\r\n            cel1: arr1,\r\n            cel2: arr2,\r\n            cel3: arr3,\r\n            cel4: arr4,\r\n            cel5: arr5,\r\n            cel6: arr6\r\n          })\r\n        })\r\n        // console.log(result)\r\n        this.setState({\r\n          file: result\r\n        })\r\n      })\r\n  }\r\n\r\n  Upload = () => {\r\n    let excel = this.state.file,\r\n      user = '1234',\r\n      date = '2019-10-13',\r\n      transport_comp = \"1\"\r\n    if (excel.length > 0) {\r\n      new Promise((resolve, rejects) => {\r\n        var a = Upfile(user, date, transport_comp, excel)\r\n        resolve(a)\r\n      }).then(res => {\r\n        console.log(res)\r\n      })\r\n        .catch(err => { console.log(err) })\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <input type=\"file\" id=\"file\" onChange={this.importExcel} />\r\n        <br />\r\n        <DatePicker />\r\n        <br />\r\n        <Select\r\n          style={{ width: 200 }}\r\n        >\r\n          {this.state.tranSportList.map((data, index) => (\r\n            <Option key={index} value={data.transport_company_number}>{data.transport_company_name}</Option>\r\n          ))}\r\n        </Select>\r\n        <br />\r\n        <Button onClick={this.Upload}>upload</Button>\r\n        <br />\r\n        <table>\r\n          {this.state.file.map((key, data_key) => (\r\n            <tr key={data_key}>\r\n              <td>{key.cel1}</td>\r\n              <td>{key.cel2}</td>\r\n              <td>{key.cel3}</td>\r\n              <td>{key.cel4}</td>\r\n              <td>{key.cel5}</td>\r\n            </tr>\r\n          ))}\r\n        </table>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ComponentUpload\r\n"]},"metadata":{},"sourceType":"module"}