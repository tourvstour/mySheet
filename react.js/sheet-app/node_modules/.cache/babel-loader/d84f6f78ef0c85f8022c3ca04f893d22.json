{"ast":null,"code":"/*\r\n * xpath.js\r\n *\r\n * An XPath 1.0 library for JavaScript.\r\n *\r\n * Cameron McCormack <cam (at) mcc.id.au>\r\n *\r\n * This work is licensed under the MIT License.\r\n *\r\n * Revision 20: April 26, 2011\r\n *   Fixed a typo resulting in FIRST_ORDERED_NODE_TYPE results being wrong,\r\n *   thanks to <shi_a009 (at) hotmail.com>.\r\n *\r\n * Revision 19: November 29, 2005\r\n *   Nodesets now store their nodes in a height balanced tree, increasing\r\n *   performance for the common case of selecting nodes in document order,\r\n *   thanks to S閎astien Cramatte <contact (at) zeninteractif.com>.\r\n *   AVL tree code adapted from Raimund Neumann <rnova (at) gmx.net>.\r\n *\r\n * Revision 18: October 27, 2005\r\n *   DOM 3 XPath support.  Caveats:\r\n *     - namespace prefixes aren't resolved in XPathEvaluator.createExpression,\r\n *       but in XPathExpression.evaluate.\r\n *     - XPathResult.invalidIteratorState is not implemented.\r\n *\r\n * Revision 17: October 25, 2005\r\n *   Some core XPath function fixes and a patch to avoid crashing certain\r\n *   versions of MSXML in PathExpr.prototype.getOwnerElement, thanks to\r\n *   S閎astien Cramatte <contact (at) zeninteractif.com>.\r\n *\r\n * Revision 16: September 22, 2005\r\n *   Workarounds for some IE 5.5 deficiencies.\r\n *   Fixed problem with prefix node tests on attribute nodes.\r\n *\r\n * Revision 15: May 21, 2005\r\n *   Fixed problem with QName node tests on elements with an xmlns=\"...\".\r\n *\r\n * Revision 14: May 19, 2005\r\n *   Fixed QName node tests on attribute node regression.\r\n *\r\n * Revision 13: May 3, 2005\r\n *   Node tests are case insensitive now if working in an HTML DOM.\r\n *\r\n * Revision 12: April 26, 2005\r\n *   Updated licence.  Slight code changes to enable use of Dean\r\n *   Edwards' script compression, http://dean.edwards.name/packer/ .\r\n *\r\n * Revision 11: April 23, 2005\r\n *   Fixed bug with 'and' and 'or' operators, fix thanks to\r\n *   Sandy McArthur <sandy (at) mcarthur.org>.\r\n *\r\n * Revision 10: April 15, 2005\r\n *   Added support for a virtual root node, supposedly helpful for\r\n *   implementing XForms.  Fixed problem with QName node tests and\r\n *   the parent axis.\r\n *\r\n * Revision 9: March 17, 2005\r\n *   Namespace resolver tweaked so using the document node as the context\r\n *   for namespace lookups is equivalent to using the document element.\r\n *\r\n * Revision 8: February 13, 2005\r\n *   Handle implicit declaration of 'xmlns' namespace prefix.\r\n *   Fixed bug when comparing nodesets.\r\n *   Instance data can now be associated with a FunctionResolver, and\r\n *     workaround for MSXML not supporting 'localName' and 'getElementById',\r\n *     thanks to Grant Gongaware.\r\n *   Fix a few problems when the context node is the root node.\r\n *\r\n * Revision 7: February 11, 2005\r\n *   Default namespace resolver fix from Grant Gongaware\r\n *   <grant (at) gongaware.com>.\r\n *\r\n * Revision 6: February 10, 2005\r\n *   Fixed bug in 'number' function.\r\n *\r\n * Revision 5: February 9, 2005\r\n *   Fixed bug where text nodes not getting converted to string values.\r\n *\r\n * Revision 4: January 21, 2005\r\n *   Bug in 'name' function, fix thanks to Bill Edney.\r\n *   Fixed incorrect processing of namespace nodes.\r\n *   Fixed NamespaceResolver to resolve 'xml' namespace.\r\n *   Implemented union '|' operator.\r\n *\r\n * Revision 3: January 14, 2005\r\n *   Fixed bug with nodeset comparisons, bug lexing < and >.\r\n *\r\n * Revision 2: October 26, 2004\r\n *   QName node test namespace handling fixed.  Few other bug fixes.\r\n *\r\n * Revision 1: August 13, 2004\r\n *   Bug fixes from William J. Edney <bedney (at) technicalpursuit.com>.\r\n *   Added minimal licence.\r\n *\r\n * Initial version: June 14, 2004\r\n */\n// non-node wrapper\nvar xpath = typeof exports === 'undefined' ? {} : exports;\n\n(function (exports) {\n  \"use strict\"; // functional helpers\n\n  function curry(func) {\n    var slice = Array.prototype.slice,\n        totalargs = func.length,\n        partial = function (args, fn) {\n      return function () {\n        return fn.apply(this, args.concat(slice.call(arguments)));\n      };\n    },\n        fn = function () {\n      var args = slice.call(arguments);\n      return args.length < totalargs ? partial(args, fn) : func.apply(this, slice.apply(arguments, [0, totalargs]));\n    };\n\n    return fn;\n  }\n\n  var forEach = curry(function (f, xs) {\n    for (var i = 0; i < xs.length; i += 1) {\n      f(xs[i], i, xs);\n    }\n  });\n  var reduce = curry(function (f, seed, xs) {\n    var acc = seed;\n    forEach(function (x, i) {\n      acc = f(acc, x, i);\n    }, xs);\n    return acc;\n  });\n  var map = curry(function (f, xs) {\n    var mapped = new Array(xs.length);\n    forEach(function (x, i) {\n      mapped[i] = f(x);\n    }, xs);\n    return mapped;\n  });\n  var filter = curry(function (f, xs) {\n    var filtered = [];\n    forEach(function (x, i) {\n      if (f(x, i)) {\n        filtered.push(x);\n      }\n    }, xs);\n    return filtered;\n  });\n\n  function compose() {\n    if (arguments.length === 0) {\n      throw new Error('compose requires at least one argument');\n    }\n\n    var funcs = Array.prototype.slice.call(arguments).reverse();\n    var f0 = funcs[0];\n    var fRem = funcs.slice(1);\n    return function () {\n      return reduce(function (acc, next) {\n        return next(acc);\n      }, f0.apply(null, arguments), fRem);\n    };\n  }\n\n  var includes = curry(function (values, value) {\n    for (var i = 0; i < values.length; i += 1) {\n      if (values[i] === value) {\n        return true;\n      }\n    }\n\n    return false;\n  });\n\n  function always(value) {\n    return function () {\n      return value;\n    };\n  }\n\n  var prop = curry(function (name, obj) {\n    return obj[name];\n  });\n\n  function toString(x) {\n    return x.toString();\n  }\n\n  var join = curry(function (s, xs) {\n    return xs.join(s);\n  });\n  var wrap = curry(function (pref, suf, str) {\n    return pref + str + suf;\n  });\n\n  function assign(target) {\n    // .length of function is 2\n    var to = Object(target);\n\n    for (var index = 1; index < arguments.length; index++) {\n      var nextSource = arguments[index];\n\n      if (nextSource != null) {\n        // Skip over if undefined or null\n        for (var nextKey in nextSource) {\n          // Avoid bugs when hasOwnProperty is shadowed\n          if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n            to[nextKey] = nextSource[nextKey];\n          }\n        }\n      }\n    }\n\n    return to;\n  } // XPathParser ///////////////////////////////////////////////////////////////\n\n\n  XPathParser.prototype = new Object();\n  XPathParser.prototype.constructor = XPathParser;\n  XPathParser.superclass = Object.prototype;\n\n  function XPathParser() {\n    this.init();\n  }\n\n  XPathParser.prototype.init = function () {\n    this.reduceActions = [];\n\n    this.reduceActions[3] = function (rhs) {\n      return new OrOperation(rhs[0], rhs[2]);\n    };\n\n    this.reduceActions[5] = function (rhs) {\n      return new AndOperation(rhs[0], rhs[2]);\n    };\n\n    this.reduceActions[7] = function (rhs) {\n      return new EqualsOperation(rhs[0], rhs[2]);\n    };\n\n    this.reduceActions[8] = function (rhs) {\n      return new NotEqualOperation(rhs[0], rhs[2]);\n    };\n\n    this.reduceActions[10] = function (rhs) {\n      return new LessThanOperation(rhs[0], rhs[2]);\n    };\n\n    this.reduceActions[11] = function (rhs) {\n      return new GreaterThanOperation(rhs[0], rhs[2]);\n    };\n\n    this.reduceActions[12] = function (rhs) {\n      return new LessThanOrEqualOperation(rhs[0], rhs[2]);\n    };\n\n    this.reduceActions[13] = function (rhs) {\n      return new GreaterThanOrEqualOperation(rhs[0], rhs[2]);\n    };\n\n    this.reduceActions[15] = function (rhs) {\n      return new PlusOperation(rhs[0], rhs[2]);\n    };\n\n    this.reduceActions[16] = function (rhs) {\n      return new MinusOperation(rhs[0], rhs[2]);\n    };\n\n    this.reduceActions[18] = function (rhs) {\n      return new MultiplyOperation(rhs[0], rhs[2]);\n    };\n\n    this.reduceActions[19] = function (rhs) {\n      return new DivOperation(rhs[0], rhs[2]);\n    };\n\n    this.reduceActions[20] = function (rhs) {\n      return new ModOperation(rhs[0], rhs[2]);\n    };\n\n    this.reduceActions[22] = function (rhs) {\n      return new UnaryMinusOperation(rhs[1]);\n    };\n\n    this.reduceActions[24] = function (rhs) {\n      return new BarOperation(rhs[0], rhs[2]);\n    };\n\n    this.reduceActions[25] = function (rhs) {\n      return new PathExpr(undefined, undefined, rhs[0]);\n    };\n\n    this.reduceActions[27] = function (rhs) {\n      rhs[0].locationPath = rhs[2];\n      return rhs[0];\n    };\n\n    this.reduceActions[28] = function (rhs) {\n      rhs[0].locationPath = rhs[2];\n      rhs[0].locationPath.steps.unshift(new Step(Step.DESCENDANTORSELF, NodeTest.nodeTest, []));\n      return rhs[0];\n    };\n\n    this.reduceActions[29] = function (rhs) {\n      return new PathExpr(rhs[0], [], undefined);\n    };\n\n    this.reduceActions[30] = function (rhs) {\n      if (Utilities.instance_of(rhs[0], PathExpr)) {\n        if (rhs[0].filterPredicates == undefined) {\n          rhs[0].filterPredicates = [];\n        }\n\n        rhs[0].filterPredicates.push(rhs[1]);\n        return rhs[0];\n      } else {\n        return new PathExpr(rhs[0], [rhs[1]], undefined);\n      }\n    };\n\n    this.reduceActions[32] = function (rhs) {\n      return rhs[1];\n    };\n\n    this.reduceActions[33] = function (rhs) {\n      return new XString(rhs[0]);\n    };\n\n    this.reduceActions[34] = function (rhs) {\n      return new XNumber(rhs[0]);\n    };\n\n    this.reduceActions[36] = function (rhs) {\n      return new FunctionCall(rhs[0], []);\n    };\n\n    this.reduceActions[37] = function (rhs) {\n      return new FunctionCall(rhs[0], rhs[2]);\n    };\n\n    this.reduceActions[38] = function (rhs) {\n      return [rhs[0]];\n    };\n\n    this.reduceActions[39] = function (rhs) {\n      rhs[2].unshift(rhs[0]);\n      return rhs[2];\n    };\n\n    this.reduceActions[43] = function (rhs) {\n      return new LocationPath(true, []);\n    };\n\n    this.reduceActions[44] = function (rhs) {\n      rhs[1].absolute = true;\n      return rhs[1];\n    };\n\n    this.reduceActions[46] = function (rhs) {\n      return new LocationPath(false, [rhs[0]]);\n    };\n\n    this.reduceActions[47] = function (rhs) {\n      rhs[0].steps.push(rhs[2]);\n      return rhs[0];\n    };\n\n    this.reduceActions[49] = function (rhs) {\n      return new Step(rhs[0], rhs[1], []);\n    };\n\n    this.reduceActions[50] = function (rhs) {\n      return new Step(Step.CHILD, rhs[0], []);\n    };\n\n    this.reduceActions[51] = function (rhs) {\n      return new Step(rhs[0], rhs[1], rhs[2]);\n    };\n\n    this.reduceActions[52] = function (rhs) {\n      return new Step(Step.CHILD, rhs[0], rhs[1]);\n    };\n\n    this.reduceActions[54] = function (rhs) {\n      return [rhs[0]];\n    };\n\n    this.reduceActions[55] = function (rhs) {\n      rhs[1].unshift(rhs[0]);\n      return rhs[1];\n    };\n\n    this.reduceActions[56] = function (rhs) {\n      if (rhs[0] == \"ancestor\") {\n        return Step.ANCESTOR;\n      } else if (rhs[0] == \"ancestor-or-self\") {\n        return Step.ANCESTORORSELF;\n      } else if (rhs[0] == \"attribute\") {\n        return Step.ATTRIBUTE;\n      } else if (rhs[0] == \"child\") {\n        return Step.CHILD;\n      } else if (rhs[0] == \"descendant\") {\n        return Step.DESCENDANT;\n      } else if (rhs[0] == \"descendant-or-self\") {\n        return Step.DESCENDANTORSELF;\n      } else if (rhs[0] == \"following\") {\n        return Step.FOLLOWING;\n      } else if (rhs[0] == \"following-sibling\") {\n        return Step.FOLLOWINGSIBLING;\n      } else if (rhs[0] == \"namespace\") {\n        return Step.NAMESPACE;\n      } else if (rhs[0] == \"parent\") {\n        return Step.PARENT;\n      } else if (rhs[0] == \"preceding\") {\n        return Step.PRECEDING;\n      } else if (rhs[0] == \"preceding-sibling\") {\n        return Step.PRECEDINGSIBLING;\n      } else if (rhs[0] == \"self\") {\n        return Step.SELF;\n      }\n\n      return -1;\n    };\n\n    this.reduceActions[57] = function (rhs) {\n      return Step.ATTRIBUTE;\n    };\n\n    this.reduceActions[59] = function (rhs) {\n      if (rhs[0] == \"comment\") {\n        return NodeTest.commentTest;\n      } else if (rhs[0] == \"text\") {\n        return NodeTest.textTest;\n      } else if (rhs[0] == \"processing-instruction\") {\n        return NodeTest.anyPiTest;\n      } else if (rhs[0] == \"node\") {\n        return NodeTest.nodeTest;\n      }\n\n      return new NodeTest(-1, undefined);\n    };\n\n    this.reduceActions[60] = function (rhs) {\n      return new NodeTest.PITest(rhs[2]);\n    };\n\n    this.reduceActions[61] = function (rhs) {\n      return rhs[1];\n    };\n\n    this.reduceActions[63] = function (rhs) {\n      rhs[1].absolute = true;\n      rhs[1].steps.unshift(new Step(Step.DESCENDANTORSELF, NodeTest.nodeTest, []));\n      return rhs[1];\n    };\n\n    this.reduceActions[64] = function (rhs) {\n      rhs[0].steps.push(new Step(Step.DESCENDANTORSELF, NodeTest.nodeTest, []));\n      rhs[0].steps.push(rhs[2]);\n      return rhs[0];\n    };\n\n    this.reduceActions[65] = function (rhs) {\n      return new Step(Step.SELF, NodeTest.nodeTest, []);\n    };\n\n    this.reduceActions[66] = function (rhs) {\n      return new Step(Step.PARENT, NodeTest.nodeTest, []);\n    };\n\n    this.reduceActions[67] = function (rhs) {\n      return new VariableReference(rhs[1]);\n    };\n\n    this.reduceActions[68] = function (rhs) {\n      return NodeTest.nameTestAny;\n    };\n\n    this.reduceActions[69] = function (rhs) {\n      return new NodeTest.NameTestPrefixAny(rhs[0].split(':')[0]);\n    };\n\n    this.reduceActions[70] = function (rhs) {\n      return new NodeTest.NameTestQName(rhs[0]);\n    };\n  };\n\n  XPathParser.actionTable = [\" s s        sssssssss    s ss  s  ss\", \"                 s                  \", \"r  rrrrrrrrr         rrrrrrr rr  r  \", \"                rrrrr               \", \" s s        sssssssss    s ss  s  ss\", \"rs  rrrrrrrr s  sssssrrrrrr  rrs rs \", \" s s        sssssssss    s ss  s  ss\", \"                            s       \", \"                            s       \", \"r  rrrrrrrrr         rrrrrrr rr rr  \", \"r  rrrrrrrrr         rrrrrrr rr rr  \", \"r  rrrrrrrrr         rrrrrrr rr rr  \", \"r  rrrrrrrrr         rrrrrrr rr rr  \", \"r  rrrrrrrrr         rrrrrrr rr rr  \", \"  s                                 \", \"                            s       \", \" s           s  sssss          s  s \", \"r  rrrrrrrrr         rrrrrrr rr  r  \", \"a                                   \", \"r       s                    rr  r  \", \"r      sr                    rr  r  \", \"r   s  rr            s       rr  r  \", \"r   rssrr            rss     rr  r  \", \"r   rrrrr            rrrss   rr  r  \", \"r   rrrrrsss         rrrrr   rr  r  \", \"r   rrrrrrrr         rrrrr   rr  r  \", \"r   rrrrrrrr         rrrrrs  rr  r  \", \"r   rrrrrrrr         rrrrrr  rr  r  \", \"r   rrrrrrrr         rrrrrr  rr  r  \", \"r  srrrrrrrr         rrrrrrs rr sr  \", \"r  srrrrrrrr         rrrrrrs rr  r  \", \"r  rrrrrrrrr         rrrrrrr rr rr  \", \"r  rrrrrrrrr         rrrrrrr rr rr  \", \"r  rrrrrrrrr         rrrrrrr rr rr  \", \"r   rrrrrrrr         rrrrrr  rr  r  \", \"r   rrrrrrrr         rrrrrr  rr  r  \", \"r  rrrrrrrrr         rrrrrrr rr  r  \", \"r  rrrrrrrrr         rrrrrrr rr  r  \", \"                sssss               \", \"r  rrrrrrrrr         rrrrrrr rr sr  \", \"r  rrrrrrrrr         rrrrrrr rr  r  \", \"r  rrrrrrrrr         rrrrrrr rr rr  \", \"r  rrrrrrrrr         rrrrrrr rr rr  \", \"                             s      \", \"r  srrrrrrrr         rrrrrrs rr  r  \", \"r   rrrrrrrr         rrrrr   rr  r  \", \"              s                     \", \"                             s      \", \"                rrrrr               \", \" s s        sssssssss    s sss s  ss\", \"r  srrrrrrrr         rrrrrrs rr  r  \", \" s s        sssssssss    s ss  s  ss\", \" s s        sssssssss    s ss  s  ss\", \" s s        sssssssss    s ss  s  ss\", \" s s        sssssssss    s ss  s  ss\", \" s s        sssssssss    s ss  s  ss\", \" s s        sssssssss    s ss  s  ss\", \" s s        sssssssss    s ss  s  ss\", \" s s        sssssssss    s ss  s  ss\", \" s s        sssssssss    s ss  s  ss\", \" s s        sssssssss    s ss  s  ss\", \" s s        sssssssss    s ss  s  ss\", \" s s        sssssssss    s ss  s  ss\", \" s s        sssssssss    s ss  s  ss\", \" s s        sssssssss      ss  s  ss\", \" s s        sssssssss    s ss  s  ss\", \" s           s  sssss          s  s \", \" s           s  sssss          s  s \", \"r  rrrrrrrrr         rrrrrrr rr rr  \", \" s           s  sssss          s  s \", \" s           s  sssss          s  s \", \"r  rrrrrrrrr         rrrrrrr rr sr  \", \"r  rrrrrrrrr         rrrrrrr rr sr  \", \"r  rrrrrrrrr         rrrrrrr rr  r  \", \"r  rrrrrrrrr         rrrrrrr rr rr  \", \"                             s      \", \"r  rrrrrrrrr         rrrrrrr rr rr  \", \"r  rrrrrrrrr         rrrrrrr rr rr  \", \"                             rr     \", \"                             s      \", \"                             rs     \", \"r      sr                    rr  r  \", \"r   s  rr            s       rr  r  \", \"r   rssrr            rss     rr  r  \", \"r   rssrr            rss     rr  r  \", \"r   rrrrr            rrrss   rr  r  \", \"r   rrrrr            rrrss   rr  r  \", \"r   rrrrr            rrrss   rr  r  \", \"r   rrrrr            rrrss   rr  r  \", \"r   rrrrrsss         rrrrr   rr  r  \", \"r   rrrrrsss         rrrrr   rr  r  \", \"r   rrrrrrrr         rrrrr   rr  r  \", \"r   rrrrrrrr         rrrrr   rr  r  \", \"r   rrrrrrrr         rrrrr   rr  r  \", \"r   rrrrrrrr         rrrrrr  rr  r  \", \"                                 r  \", \"                                 s  \", \"r  srrrrrrrr         rrrrrrs rr  r  \", \"r  srrrrrrrr         rrrrrrs rr  r  \", \"r  rrrrrrrrr         rrrrrrr rr  r  \", \"r  rrrrrrrrr         rrrrrrr rr  r  \", \"r  rrrrrrrrr         rrrrrrr rr  r  \", \"r  rrrrrrrrr         rrrrrrr rr  r  \", \"r  rrrrrrrrr         rrrrrrr rr rr  \", \"r  rrrrrrrrr         rrrrrrr rr rr  \", \" s s        sssssssss    s ss  s  ss\", \"r  rrrrrrrrr         rrrrrrr rr rr  \", \"                             r      \"];\n  XPathParser.actionTableNumber = [\" 1 0        /.-,+*)('    & %$  #  \\\"!\", \"                 J                  \", \"a  aaaaaaaaa         aaaaaaa aa  a  \", \"                YYYYY               \", \" 1 0        /.-,+*)('    & %$  #  \\\"!\", \"K1  KKKKKKKK .  +*)('KKKKKK  KK# K\\\" \", \" 1 0        /.-,+*)('    & %$  #  \\\"!\", \"                            N       \", \"                            O       \", \"e  eeeeeeeee         eeeeeee ee ee  \", \"f  fffffffff         fffffff ff ff  \", \"d  ddddddddd         ddddddd dd dd  \", \"B  BBBBBBBBB         BBBBBBB BB BB  \", \"A  AAAAAAAAA         AAAAAAA AA AA  \", \"  P                                 \", \"                            Q       \", \" 1           .  +*)('          #  \\\" \", \"b  bbbbbbbbb         bbbbbbb bb  b  \", \"                                    \", \"!       S                    !!  !  \", \"\\\"      T\\\"                    \\\"\\\"  \\\"  \", \"$   V  $$            U       $$  $  \", \"&   &ZY&&            &XW     &&  &  \", \")   )))))            )))\\\\[   ))  )  \", \".   ....._^]         .....   ..  .  \", \"1   11111111         11111   11  1  \", \"5   55555555         55555`  55  5  \", \"7   77777777         777777  77  7  \", \"9   99999999         999999  99  9  \", \":  c::::::::         ::::::b :: a:  \", \"I  fIIIIIIII         IIIIIIe II  I  \", \"=  =========         ======= == ==  \", \"?  ?????????         ??????? ?? ??  \", \"C  CCCCCCCCC         CCCCCCC CC CC  \", \"J   JJJJJJJJ         JJJJJJ  JJ  J  \", \"M   MMMMMMMM         MMMMMM  MM  M  \", \"N  NNNNNNNNN         NNNNNNN NN  N  \", \"P  PPPPPPPPP         PPPPPPP PP  P  \", \"                +*)('               \", \"R  RRRRRRRRR         RRRRRRR RR aR  \", \"U  UUUUUUUUU         UUUUUUU UU  U  \", \"Z  ZZZZZZZZZ         ZZZZZZZ ZZ ZZ  \", \"c  ccccccccc         ccccccc cc cc  \", \"                             j      \", \"L  fLLLLLLLL         LLLLLLe LL  L  \", \"6   66666666         66666   66  6  \", \"              k                     \", \"                             l      \", \"                XXXXX               \", \" 1 0        /.-,+*)('    & %$m #  \\\"!\", \"_  f________         ______eaQ  \", \"V  VVVVVVVVV         VVVVVVV VV aV  \", \"T  TTTTTTTTT         TTTTTTT TT  T  \", \"@  @@@@@@@@@         @@@@@@@ @@ @@  \", \"                             \\x87      \", \"[  [[[[[[[[[         [[[[[[[ [[ [[  \", \"D  DDDDDDDDD         DDDDDDD DD DD  \", \"                             HH     \", \"                             \\x88      \", \"                             F\\x89     \", \"#      T#                    ##  #  \", \"%   V  %%            U       %%  %  \", \"'   'ZY''            'XW     ''  '  \", \"(   (ZY((            (XW     ((  (  \", \"+   +++++            +++\\\\[   ++  +  \", \"*   *****            ***\\\\[   **  *  \", \"-   -----            ---\\\\[   --  -  \", \",   ,,,,,            ,,,\\\\[   ,,  ,  \", \"0   00000_^]         00000   00  0  \", \"/   /////_^]         /////   //  /  \", \"2   22222222         22222   22  2  \", \"3   33333333         33333   33  3  \", \"4   44444444         44444   44  4  \", \"8   88888888         888888  88  8  \", \"                                 ^  \", \"                                 \\x8a  \", \";  f;;;;;;;;         ;;;;;;e ;;  ;  \", \"<  f<<<<<<<<         <<<<<<e <<  <  \", \"O  OOOOOOOOO         OOOOOOO OO  O  \", \"`  `````````         ``````` ``  `  \", \"S  SSSSSSSSS         SSSSSSS SS  S  \", \"W  WWWWWWWWW         WWWWWWW WW  W  \", \"\\\\  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\         \\\\\\\\\\\\\\\\\\\\\\\\\\\\ \\\\\\\\ \\\\\\\\  \", \"E  EEEEEEEEE         EEEEEEE EE EE  \", \" 1 0        /.-,+*)('    & %$  #  \\\"!\", \"]  ]]]]]]]]]         ]]]]]]] ]] ]]  \", \"                             G      \"];\n  XPathParser.gotoTablee              \", \"                             \", \"                             \", \"                             \", \"                             \", \"                             \", \"                             \", \"                             \", \"                             \", \"                        h  J \", \"              i          j   \", \"                             \", \"                             \", \"                             \", \"                             \", \"                             \", \"                             \", \"                             \", \"                             \", \"                             \", \"o456789:;<=>?@ ABpqCDEFGH IJ \", \"                             \", \"  r6789:;<=>?@ AB  CDEFGH IJ \", \"   s789:;<=>?@ AB  CDEFGH IJ \", \"    t89:;<=>?@ AB  CDEFGH IJ \", \"    u89:;<=>?@ AB  CDEFGH IJ \", \"     v9:;<=>?@ AB  CDEFGH IJ \", \"     w9:;<=>?@ AB  CDEFGH IJ \", \"     x9:;<=>?@ AB  CDEFGH IJ \", \"     y9:;<=>?@ AB  CDEFGH IJ \", \"      z:;<=>?@ AB  CDEFGH IJ \", \"      {:;<=>?@ AB  CDEFGH IJ \", \"       |;<=>?@ AB  CDEFGH IJ \", \"       };<=>?@ AB  CDEFGH IJ \", \"       ~;<=>?@ AB  CDEFGH IJ \", \"         \\x7f=>?@ AB  CDEFGH IJ \", \"\\x80456789:;<=>?@ AB  CDEFGH IJ\\x81\", \"            \\x82        EFGH IJ \", \"            \\x83        EFGH IJ \", \"                             \", \"                     \\x84 GH IJ \", \"                     \\x85 GH IJ \", \"              i          \\x86   \", \"              i          \\xo456789:;<=>?@ AB\\x8cqCDEFGH IJ \", \"                             \", \"                             \"];\n  XPathParser.productions = [[1, 1, 2], [2, 1, 3], [3, 1, 4], [3, 3, 3, -9, 4], [4, 1, 5], [4, 3, 4, -8, 5], [5, 1, 6], [5, 3, 5, -22, 6], [5, 3, 5, -5, 6], [6, 1, 7], [6, 3, 6, -23, 7], [6, 3, 6, -24, 7], [6, 3, 6, -6, 7], [6, 3, 6, -7, 7], [7, 1, 8], [7, 3, 7, -25, 8], [7, 3, 7, -26, 8], [8, 1, 9], [8, 3, 8, -12, 9], [8, 3, 8, -11, 9], [8, 3, 8, -10, 9], [9, 1, 10], [9, 2, -26, 9], [10, 1, 11], [10, 3, 10, -27, 11], [11, 1, 12], [11, 1, 13], [11, 3, 13, -28, 14], [11, 3, 13, -4, 14], [13, 1, 15], [13, 2, 13, 16], [15, 1, 17], [15, 3, -29, 2, -30], [15, 1, -15], [15, 1, -16], [15, 1, 18], [18, 3, -13, -29, -30], [18, 4, -13, -29, 19, -30], [19, 1, 20], [19, 3, 20, -31, 19], [20, 1, 2], [12, 1, 14], [12, 1, 21], [21, 1, -28], [21, 2, -28, 14], [21, 1, 22], [14, 1, 23], [14, 3, 14, -28, 23], [14, 1, 24], [23, 2, 25, 26], [23, 1, 26], [23, 3, 25, 26, 27], [23, 2, 26, 27], [23, 1, 28], [27, 1, 16], [27, 2, 16, 27], [25, 2, -14, -3], [25, 1, -32], [26, 1, 29], [26, 3, -20, -29, -30], [26, 4, -21, -29, -15, -30], [16, 3, -33, 30, -34], [30, 1, 2], [22, 2, -4, 14], [24, 3, 14, -4, 23], [28, 1, -35], [28, 1, -2], [17, 2, -36, -18], [29, 1, -17], [29, 1, -19], [29, 1, -18]];\n  XPathParser.DOUBLEDOT = 2;\n  XPathParser.DOUBLECOLON = 3;\n  XPathParser.DOUBLESLASH = 4;\n  XPathParser.NOTEQUAL = 5;\n  XPathParser.LESSTHANOREQUAL = 6;\n  XPathParser.GREATERTHANOREQUAL = 7;\n  XPathParser.AND = 8;\n  XPathParser.OR = 9;\n  XPathParser.MOD = 10;\n  XPathParser.DIV = 11;\n  XPathParser.MULTIPLYOPERATOR = 12;\n  XPathParser.FUNCTIONNAME = 13;\n  XPathParser.AXISNAME = 14;\n  XPathParser.LITERAL = 15;\n  XPathParser.NUMBER = 16;\n  XPathParser.ASTERISKNAMETEST = 17;\n  XPathParser.QNAME = 18;\n  XPathParser.NCNAMECOLONASTERISK = 19;\n  XPathParser.NODETYPE = 20;\n  XPathParser.PROCESSINGINSTRUCTIONWITHLITERAL = 21;\n  XPathParser.EQUALS = 22;\n  XPathParser.LESSTHAN = 23;\n  XPathParser.GREATERTHAN = 24;\n  XPathParser.PLUS = 25;\n  XPathParser.MINUS = 26;\n  XPathParser.BAR = 27;\n  XPathParser.SLASH = 28;\n  XPathParser.LEFTPARENTHESIS = 29;\n  XPathParser.RIGHTPARENTHESIS = 30;\n  XPathParser.COMMA = 31;\n  XPathParser.AT = 32;\n  XPathParser.LEFTBRACKET = 33;\n  XPathParser.RIGHTBRACKET = 34;\n  XPathParser.DOT = 35;\n  XPathParser.DOLLAR = 36;\n\n  XPathParser.prototype.tokenize = function (s1) {\n    var types = [];\n    var values = [];\n    var s = s1 + '\\0';\n    var pos = 0;\n    var c = s.charAt(pos++);\n\n    while (1) {\n      while (c == ' ' || c == '\\t' || c == '\\r' || c == '\\n') {\n        c = s.charAt(pos++);\n      }\n\n      if (c == '\\0' || pos >= s.length) {\n        break;\n      }\n\n      if (c == '(') {\n        types.push(XPathParser.LEFTPARENTHESIS);\n        values.push(c);\n        c = s.charAt(pos++);\n        continue;\n      }\n\n      if (c == ')') {\n        types.push(XPathParser.RIGHTPARENTHESIS);\n        values.push(c);\n        c = s.charAt(pos++);\n        continue;\n      }\n\n      if (c == '[') {\n        types.push(XPathParser.LEFTBRACKET);\n        values.push(c);\n        c = s.charAt(pos++);\n        continue;\n      }\n\n      if (c == ']') {\n        types.push(XPathParser.RIGHTBRACKET);\n        values.push(c);\n        c = s.charAt(pos++);\n        continue;\n      }\n\n      if (c == '@') {\n        types.push(XPathParser.AT);\n        values.push(c);\n        c = s.charAt(pos++);\n        continue;\n      }\n\n      if (c == ',') {\n        types.push(XPathParser.COMMA);\n        values.push(c);\n        c = s.charAt(pos++);\n        continue;\n      }\n\n      if (c == '|') {\n        types.push(XPathParser.BAR);\n        values.push(c);\n        c = s.charAt(pos++);\n        continue;\n      }\n\n      if (c == '+') {\n        types.push(XPathParser.PLUS);\n        values.push(c);\n        c = s.charAt(pos++);\n        continue;\n      }\n\n      if (c == '-') {\n        types.push(XPathParser.MINUS);\n        values.push(c);\n        c = s.charAt(pos++);\n        continue;\n      }\n\n      if (c == '=') {\n        types.push(XPathParser.EQUALS);\n        values.push(c);\n        c = s.charAt(pos++);\n        continue;\n      }\n\n      if (c == '$') {\n        types.push(XPathParser.DOLLAR);\n        values.push(c);\n        c = s.charAt(pos++);\n        continue;\n      }\n\n      if (c == '.') {\n        c = s.charAt(pos++);\n\n        if (c == '.') {\n          types.push(XPathParser.DOUBLEDOT);\n          values.push(\"..\");\n          c = s.charAt(pos++);\n          continue;\n        }\n\n        if (c >= '0' && c <= '9') {\n          var number = \".\" + c;\n          c = s.charAt(pos++);\n\n          while (c >= '0' && c <= '9') {\n            number += c;\n            c = s.charAt(pos++);\n          }\n\n          types.push(XPathParser.NUMBER);\n          values.push(number);\n          continue;\n        }\n\n        types.push(XPathParser.DOT);\n        values.push('.');\n        continue;\n      }\n\n      if (c == '\\'' || c == '\"') {\n        var delimiter = c;\n        var literal = \"\";\n\n        while (pos < s.length && (c = s.charAt(pos)) !== delimiter) {\n          literal += c;\n          pos += 1;\n        }\n\n        if (c !== delimiter) {\n          throw XPathException.fromMessage(\"Unterminated string literal: \" + delimiter + literal);\n        }\n\n        pos += 1;\n        types.push(XPathParser.LITERAL);\n        values.push(literal);\n        c = s.charAt(pos++);\n        continue;\n      }\n\n      if (c >= '0' && c <= '9') {\n        var number = c;\n        c = s.charAt(pos++);\n\n        while (c >= '0' && c <= '9') {\n          number += c;\n          c = s.charAt(pos++);\n        }\n\n        if (c == '.') {\n          if (s.charAt(pos) >= '0' && s.charAt(pos) <= '9') {\n            number += c;\n            number += s.charAt(pos++);\n            c = s.charAt(pos++);\n\n            while (c >= '0' && c <= '9') {\n              number += c;\n              c = s.charAt(pos++);\n            }\n          }\n        }\n\n        types.push(XPathParser.NUMBER);\n        values.push(number);\n        continue;\n      }\n\n      if (c == '*') {\n        if (types.length > 0) {\n          var last = types[types.length - 1];\n\n          if (last != XPathParser.AT && last != XPathParser.DOUBLECOLON && last != XPathParser.LEFTPARENTHESIS && last != XPathParser.LEFTBRACKET && last != XPathParser.AND && last != XPathParser.OR && last != XPathParser.MOD && last != XPathParser.DIV && last != XPathParser.MULTIPLYOPERATOR && last != XPathParser.SLASH && last != XPathParser.DOUBLESLASH && last != XPathParser.BAR && last != XPathParser.PLUS && last != XPathParser.MINUS && last != XPathParser.EQUALS && last != XPathParser.NOTEQUAL && last != XPathParser.LESSTHAN && last != XPathParser.LESSTHANOREQUAL && last != XPathParser.GREATERTHAN && last != XPathParser.GREATERTHANOREQUAL) {\n            types.push(XPathParser.MULTIPLYOPERATOR);\n            values.push(c);\n            c = s.charAt(pos++);\n            continue;\n          }\n        }\n\n        types.push(XPathParser.ASTERISKNAMETEST);\n        values.push(c);\n        c = s.charAt(pos++);\n        continue;\n      }\n\n      if (c == ':') {\n        if (s.charAt(pos) == ':') {\n          types.push(XPathParser.DOUBLECOLON);\n          values.push(\"::\");\n          pos++;\n          c = s.charAt(pos++);\n          continue;\n        }\n      }\n\n      if (c == '/') {\n        c = s.charAt(pos++);\n\n        if (c == '/') {\n          types.push(XPathParser.DOUBLESLASH);\n          values.push(\"//\");\n          c = s.charAt(pos++);\n          continue;\n        }\n\n        types.push(XPathParser.SLASH);\n        values.push('/');\n        continue;\n      }\n\n      if (c == '!') {\n        if (s.charAt(pos) == '=') {\n          types.push(XPathParser.NOTEQUAL);\n          values.push(\"!=\");\n          pos++;\n          c = s.charAt(pos++);\n          continue;\n        }\n      }\n\n      if (c == '<') {\n        if (s.charAt(pos) == '=') {\n          types.push(XPathParser.LESSTHANOREQUAL);\n          values.push(\"<=\");\n          pos++;\n          c = s.charAt(pos++);\n          continue;\n        }\n\n        types.push(XPathParser.LESSTHAN);\n        values.push('<');\n        c = s.charAt(pos++);\n        continue;\n      }\n\n      if (c == '>') {\n        if (s.charAt(pos) == '=') {\n          types.push(XPathParser.GREATERTHANOREQUAL);\n          values.push(\">=\");\n          pos++;\n          c = s.charAt(pos++);\n          continue;\n        }\n\n        types.push(XPathParser.GREATERTHAN);\n        values.push('>');\n        c = s.charAt(pos++);\n        continue;\n      }\n\n      if (c == '_' || Utilities.isLetter(c.charCodeAt(0))) {\n        var name = c;\n        c = s.charAt(pos++);\n\n        while (Utilities.isNCNameChar(c.charCodeAt(0))) {\n          name += c;\n          c = s.charAt(pos++);\n        }\n\n        if (types.length > 0) {\n          var last = types[types.length - 1];\n\n          if (last != XPathParser.AT && last != XPathParser.DOUBLECOLON && last != XPathParser.LEFTPARENTHESIS && last != XPathParser.LEFTBRACKET && last != XPathParser.AND && last != XPathParser.OR && last != XPathParser.MOD && last != XPathParser.DIV && last != XPathParser.MULTIPLYOPERATOR && last != XPathParser.SLASH && last != XPathParser.DOUBLESLASH && last != XPathParser.BAR && last != XPathParser.PLUS && last != XPathParser.MINUS && last != XPathParser.EQUALS && last != XPathParser.NOTEQUAL && last != XPathParser.LESSTHAN && last != XPathParser.LESSTHANOREQUAL && last != XPathParser.GREATERTHAN && last != XPathParser.GREATERTHANOREQUAL) {\n            if (name == \"and\") {\n              types.push(XPathParser.AND);\n              values.push(name);\n              continue;\n            }\n\n            if (name == \"or\") {\n              types.push(XPathParser.OR);\n              values.push(name);\n              continue;\n            }\n\n            if (name == \"mod\") {\n              types.push(XPathParser.MOD);\n              values.push(name);\n              continue;\n            }\n\n            if (name == \"div\") {\n              types.push(XPathParser.DIV);\n              values.push(name);\n              continue;\n            }\n          }\n        }\n\n        if (c == ':') {\n          if (s.charAt(pos) == '*') {\n            types.push(XPathParser.NCNAMECOLONASTERISK);\n            values.push(name + \":*\");\n            pos++;\n            c = s.charAt(pos++);\n            continue;\n          }\n\n          if (s.charAt(pos) == '_' || Utilities.isLetter(s.charCodeAt(pos))) {\n            name += ':';\n            c = s.charAt(pos++);\n\n            while (Utilities.isNCNameChar(c.charCodeAt(0))) {\n              name += c;\n              c = s.charAt(pos++);\n            }\n\n            if (c == '(') {\n              types.push(XPathParser.FUNCTIONNAME);\n              values.push(name);\n              continue;\n            }\n\n            types.push(XPathParser.QNAME);\n            values.push(name);\n            continue;\n          }\n\n          if (s.charAt(pos) == ':') {\n            types.push(XPathParser.AXISNAME);\n            values.push(name);\n            continue;\n          }\n        }\n\n        if (c == '(') {\n          if (name == \"comment\" || name == \"text\" || name == \"node\") {\n            types.push(XPathParser.NODETYPE);\n            values.push(name);\n            continue;\n          }\n\n          if (name == \"processing-instruction\") {\n            if (s.charAt(pos) == ')') {\n              types.push(XPathParser.NODETYPE);\n            } else {\n              types.push(XPathParser.PROCESSINGINSTRUCTIONWITHLITERAL);\n            }\n\n            values.push(name);\n            continue;\n          }\n\n          types.push(XPathParser.FUNCTIONNAME);\n          values.push(name);\n          continue;\n        }\n\n        types.push(XPathParser.QNAME);\n        values.push(name);\n        continue;\n      }\n\n      throw new Error(\"Unexpected character \" + c);\n    }\n\n    types.push(1);\n    values.push(\"[EOF]\");\n    return [types, values];\n  };\n\n  XPathParser.SHIFT = 's';\n  XPathParser.REDUCE = 'r';\n  XPathParser.ACCEPT = 'a';\n\n  XPathParser.prototype.parse = function (s) {\n    var types;\n    var values;\n    var res = this.tokenize(s);\n\n    if (res == undefined) {\n      return undefined;\n    }\n\n    types = res[0];\n    values = res[1];\n    var tokenPos = 0;\n    var state = [];\n    var tokenType = [];\n    var tokenValue = [];\n    var s;\n    var a;\n    var t;\n    state.push(0);\n    tokenType.push(1);\n    tokenValue.push(\"_S\");\n    a = types[tokenPos];\n    t = values[tokenPos++];\n\n    while (1) {\n      s = state[state.length - 1];\n\n      switch (XPathParser.actionTable[s].charAt(a - 1)) {\n        case XPathParser.SHIFT:\n          tokenType.push(-a);\n          tokenValue.push(t);\n          state.push(XPathParser.actionTableNumber[s].charCodeAt(a - 1) - 32);\n          a = types[tokenPos];\n          t = values[tokenPos++];\n          break;\n\n        case XPathParser.REDUCE:\n          var num = XPathParser.productions[XPathParser.actionTableNumber[s].charCodeAt(a - 1) - 32][1];\n          var rhs = [];\n\n          for (var i = 0; i < num; i++) {\n            tokenType.pop();\n            rhs.unshift(tokenValue.pop());\n            state.pop();\n          }\n\n          var s_ = state[state.length - 1];\n          tokenType.push(XPathParser.productions[XPathParser.actionTableNumber[s].charCodeAt(a - 1) - 32][0]);\n\n          if (this.reduceActions[XPathParser.actionTableNumber[s].charCodeAt(a - 1) - 32] == undefined) {\n            tokenValue.push(rhs[0]);\n          } else {\n            tokenValue.push(this.reduceActions[XPathParser.actionTableNumber[s].charCodeAt(a - 1) - 32](rhs));\n          }\n\n          state.push(XPathParser.gotoTable[s_].charCodeAt(XPathParser.productions[XPathParser.actionTableNumber[s].charCodeAt(a - 1) - 32][0] - 2) - 33);\n          break;\n\n        case XPathParser.ACCEPT:\n          return new XPath(tokenValue.pop());\n\n        default:\n          throw new Error(\"XPath parse error\");\n      }\n    }\n  }; // XPath /////////////////////////////////////////////////////////////////////\n\n\n  XPath.prototype = new Object();\n  XPath.prototype.constructor = XPath;\n  XPath.superclass = Object.prototype;\n\n  function XPath(e) {\n    this.expression = e;\n  }\n\n  XPath.prototype.toString = function () {\n    return this.expression.toString();\n  };\n\n  function setIfUnset(obj, prop, value) {\n    if (!(prop in obj)) {\n      obj[prop] = value;\n    }\n  }\n\n  XPath.prototype.evaluate = function (c) {\n    c.contextNode = c.expressionContextNode;\n    c.contextSize = 1;\n    c.contextPosition = 1; // [2017-11-25] Removed usage of .implementation.hasFeature() since it does\n    //              not reliably detect HTML DOMs (always returns false in xmldom and true in browsers)\n\n    if (c.isHtml) {\n      setIfUnset(c, 'caseInsensitive', true);\n      setIfUnset(c, 'allowAnyNamespaceForNoPrefix', true);\n    }\n\n    setIfUnset(c, 'caseInsensitive', false);\n    return this.expression.evaluate(c);\n  };\n\n  XPath.XML_NAMESPACE_URI = \"http://www.w3.org/XML/1998/namespace\";\n  XPath.XMLNS_NAMESPACE_URI = \"http://www.w3.org/2000/xmlns/\"; // Expression ////////////////////////////////////////////////////////////////\n\n  Expression.prototype = new Object();\n  Expression.prototype.constructor = Expression;\n  Expression.superclass = Object.prototype;\n\n  function Expression() {}\n\n  Expression.prototype.init = function () {};\n\n  Expression.prototype.toString = function () {\n    return \"<Expression>\";\n  };\n\n  Expression.prototype.evaluate = function (c) {\n    throw new Error(\"Could not evaluate expression.\");\n  }; // UnaryOperation ////////////////////////////////////////////////////////////\n\n\n  UnaryOperation.prototype = new Expression();\n  UnaryOperation.prototype.constructor = UnaryOperation;\n  UnaryOperation.superclass = Expression.prototype;\n\n  function UnaryOperation(rhs) {\n    if (arguments.length > 0) {\n      this.init(rhs);\n    }\n  }\n\n  UnaryOperation.prototype.init = function (rhs) {\n    this.rhs = rhs;\n  }; // UnaryMinusOperation ///////////////////////////////////////////////////////\n\n\n  UnaryMinusOperation.prototype = new UnaryOperation();\n  UnaryMinusOperation.prototype.constructor = UnaryMinusOperation;\n  UnaryMinusOperation.superclass = UnaryOperation.prototype;\n\n  function UnaryMinusOperation(rhs) {\n    if (arguments.length > 0) {\n      this.init(rhs);\n    }\n  }\n\n  UnaryMinusOperation.prototype.init = function (rhs) {\n    UnaryMinusOperation.superclass.init.call(this, rhs);\n  };\n\n  UnaryMinusOperation.prototype.evaluate = function (c) {\n    return this.rhs.evaluate(c).number().negate();\n  };\n\n  UnaryMinusOperation.prototype.toString = function () {\n    return \"-\" + this.rhs.toString();\n  }; // BinaryOperation ///////////////////////////////////////////////////////////\n\n\n  BinaryOperation.prototype = new Expression();\n  BinaryOperation.prototype.constructor = BinaryOperation;\n  BinaryOperation.superclass = Expression.prototype;\n\n  function BinaryOperation(lhs, rhs) {\n    if (arguments.length > 0) {\n      this.init(lhs, rhs);\n    }\n  }\n\n  BinaryOperation.prototype.init = function (lhs, rhs) {\n    this.lhs = lhs;\n    this.rhs = rhs;\n  }; // OrOperation ///////////////////////////////////////////////////////////////\n\n\n  OrOperation.prototype = new BinaryOperation();\n  OrOperation.prototype.constructor = OrOperation;\n  OrOperation.superclass = BinaryOperation.prototype;\n\n  function OrOperation(lhs, rhs) {\n    if (arguments.length > 0) {\n      this.init(lhs, rhs);\n    }\n  }\n\n  OrOperation.prototype.init = function (lhs, rhs) {\n    OrOperation.superclass.init.call(this, lhs, rhs);\n  };\n\n  OrOperation.prototype.toString = function () {\n    return \"(\" + this.lhs.toString() + \" or \" + this.rhs.toString() + \")\";\n  };\n\n  OrOperation.prototype.evaluate = function (c) {\n    var b = this.lhs.evaluate(c).bool();\n\n    if (b.booleanValue()) {\n      return b;\n    }\n\n    return this.rhs.evaluate(c).bool();\n  }; // AndOperation //////////////////////////////////////////////////////////////\n\n\n  AndOperation.prototype = new BinaryOperation();\n  AndOperation.prototype.constructor = AndOperation;\n  AndOperation.superclass = BinaryOperation.prototype;\n\n  function AndOperation(lhs, rhs) {\n    if (arguments.length > 0) {\n      this.init(lhs, rhs);\n    }\n  }\n\n  AndOperation.prototype.init = function (lhs, rhs) {\n    AndOperation.superclass.init.call(this, lhs, rhs);\n  };\n\n  AndOperation.prototype.toString = function () {\n    return \"(\" + this.lhs.toString() + \" and \" + this.rhs.toString() + \")\";\n  };\n\n  AndOperation.prototype.evaluate = function (c) {\n    var b = this.lhs.evaluate(c).bool();\n\n    if (!b.booleanValue()) {\n      return b;\n    }\n\n    return this.rhs.evaluate(c).bool();\n  }; // EqualsOperation ///////////////////////////////////////////////////////////\n\n\n  EqualsOperation.prototype = new BinaryOperation();\n  EqualsOperation.prototype.constructor = EqualsOperation;\n  EqualsOperation.superclass = BinaryOperation.prototype;\n\n  function EqualsOperation(lhs, rhs) {\n    if (arguments.length > 0) {\n      this.init(lhs, rhs);\n    }\n  }\n\n  EqualsOperation.prototype.init = function (lhs, rhs) {\n    EqualsOperation.superclass.init.call(this, lhs, rhs);\n  };\n\n  EqualsOperation.prototype.toString = function () {\n    return \"(\" + this.lhs.toString() + \" = \" + this.rhs.toString() + \")\";\n  };\n\n  EqualsOperation.prototype.evaluate = function (c) {\n    return this.lhs.evaluate(c).equals(this.rhs.evaluate(c));\n  }; // NotEqualOperation /////////////////////////////////////////////////////////\n\n\n  NotEqualOperation.prototype = new BinaryOperation();\n  NotEqualOperation.prototype.constructor = NotEqualOperation;\n  NotEqualOperation.superclass = BinaryOperation.prototype;\n\n  function NotEqualOperation(lhs, rhs) {\n    if (arguments.length > 0) {\n      this.init(lhs, rhs);\n    }\n  }\n\n  NotEqualOperation.prototype.init = function (lhs, rhs) {\n    NotEqualOperation.superclass.init.call(this, lhs, rhs);\n  };\n\n  NotEqualOperation.prototype.toString = function () {\n    return \"(\" + this.lhs.toString() + \" != \" + this.rhs.toString() + \")\";\n  };\n\n  NotEqualOperation.prototype.evaluate = function (c) {\n    return this.lhs.evaluate(c).notequal(this.rhs.evaluate(c));\n  }; // LessThanOperation /////////////////////////////////////////////////////////\n\n\n  LessThanOperation.prototype = new BinaryOperation();\n  LessThanOperation.prototype.constructor = LessThanOperation;\n  LessThanOperation.superclass = BinaryOperation.prototype;\n\n  function LessThanOperation(lhs, rhs) {\n    if (arguments.length > 0) {\n      this.init(lhs, rhs);\n    }\n  }\n\n  LessThanOperation.prototype.init = function (lhs, rhs) {\n    LessThanOperation.superclass.init.call(this, lhs, rhs);\n  };\n\n  LessThanOperation.prototype.evaluate = function (c) {\n    return this.lhs.evaluate(c).lessthan(this.rhs.evaluate(c));\n  };\n\n  LessThanOperation.prototype.toString = function () {\n    return \"(\" + this.lhs.toString() + \" < \" + this.rhs.toString() + \")\";\n  }; // GreaterThanOperation //////////////////////////////////////////////////////\n\n\n  GreaterThanOperation.prototype = new BinaryOperation();\n  GreaterThanOperation.prototype.constructor = GreaterThanOperation;\n  GreaterThanOperation.superclass = BinaryOperation.prototype;\n\n  function GreaterThanOperation(lhs, rhs) {\n    if (arguments.length > 0) {\n      this.init(lhs, rhs);\n    }\n  }\n\n  GreaterThanOperation.prototype.init = function (lhs, rhs) {\n    GreaterThanOperation.superclass.init.call(this, lhs, rhs);\n  };\n\n  GreaterThanOperation.prototype.evaluate = function (c) {\n    return this.lhs.evaluate(c).greaterthan(this.rhs.evaluate(c));\n  };\n\n  GreaterThanOperation.prototype.toString = function () {\n    return \"(\" + this.lhs.toString() + \" > \" + this.rhs.toString() + \")\";\n  }; // LessThanOrEqualOperation //////////////////////////////////////////////////\n\n\n  LessThanOrEqualOperation.prototype = new BinaryOperation();\n  LessThanOrEqualOperation.prototype.constructor = LessThanOrEqualOperation;\n  LessThanOrEqualOperation.superclass = BinaryOperation.prototype;\n\n  function LessThanOrEqualOperation(lhs, rhs) {\n    if (arguments.length > 0) {\n      this.init(lhs, rhs);\n    }\n  }\n\n  LessThanOrEqualOperation.prototype.init = function (lhs, rhs) {\n    LessThanOrEqualOperation.superclass.init.call(this, lhs, rhs);\n  };\n\n  LessThanOrEqualOperation.prototype.evaluate = function (c) {\n    return this.lhs.evaluate(c).lessthanorequal(this.rhs.evaluate(c));\n  };\n\n  LessThanOrEqualOperation.prototype.toString = function () {\n    return \"(\" + this.lhs.toString() + \" <= \" + this.rhs.toString() + \")\";\n  }; // GreaterThanOrEqualOperation ///////////////////////////////////////////////\n\n\n  GreaterThanOrEqualOperation.prototype = new BinaryOperation();\n  GreaterThanOrEqualOperation.prototype.constructor = GreaterThanOrEqualOperation;\n  GreaterThanOrEqualOperation.superclass = BinaryOperation.prototype;\n\n  function GreaterThanOrEqualOperation(lhs, rhs) {\n    if (arguments.length > 0) {\n      this.init(lhs, rhs);\n    }\n  }\n\n  GreaterThanOrEqualOperation.prototype.init = function (lhs, rhs) {\n    GreaterThanOrEqualOperation.superclass.init.call(this, lhs, rhs);\n  };\n\n  GreaterThanOrEqualOperation.prototype.evaluate = function (c) {\n    return this.lhs.evaluate(c).greaterthanorequal(this.rhs.evaluate(c));\n  };\n\n  GreaterThanOrEqualOperation.prototype.toString = function () {\n    return \"(\" + this.lhs.toString() + \" >= \" + this.rhs.toString() + \")\";\n  }; // PlusOperation /////////////////////////////////////////////////////////////\n\n\n  PlusOperation.prototype = new BinaryOperation();\n  PlusOperation.prototype.constructor = PlusOperation;\n  PlusOperation.superclass = BinaryOperation.prototype;\n\n  function PlusOperation(lhs, rhs) {\n    if (arguments.length > 0) {\n      this.init(lhs, rhs);\n    }\n  }\n\n  PlusOperation.prototype.init = function (lhs, rhs) {\n    PlusOperation.superclass.init.call(this, lhs, rhs);\n  };\n\n  PlusOperation.prototype.evaluate = function (c) {\n    return this.lhs.evaluate(c).number().plus(this.rhs.evaluate(c).number());\n  };\n\n  PlusOperation.prototype.toString = function () {\n    return \"(\" + this.lhs.toString() + \" + \" + this.rhs.toString() + \")\";\n  }; // MinusOperation ////////////////////////////////////////////////////////////\n\n\n  MinusOperation.prototype = new BinaryOperation();\n  MinusOperation.prototype.constructor = MinusOperation;\n  MinusOperation.superclass = BinaryOperation.prototype;\n\n  function MinusOperation(lhs, rhs) {\n    if (arguments.length > 0) {\n      this.init(lhs, rhs);\n    }\n  }\n\n  MinusOperation.prototype.init = function (lhs, rhs) {\n    MinusOperation.superclass.init.call(this, lhs, rhs);\n  };\n\n  MinusOperation.prototype.evaluate = function (c) {\n    return this.lhs.evaluate(c).number().minus(this.rhs.evaluate(c).number());\n  };\n\n  MinusOperation.prototype.toString = function () {\n    return \"(\" + this.lhs.toString() + \" - \" + this.rhs.toString() + \")\";\n  }; // MultiplyOperation /////////////////////////////////////////////////////////\n\n\n  MultiplyOperation.prototype = new BinaryOperation();\n  MultiplyOperation.prototype.constructor = MultiplyOperation;\n  MultiplyOperation.superclass = BinaryOperation.prototype;\n\n  function MultiplyOperation(lhs, rhs) {\n    if (arguments.length > 0) {\n      this.init(lhs, rhs);\n    }\n  }\n\n  MultiplyOperation.prototype.init = function (lhs, rhs) {\n    MultiplyOperation.superclass.init.call(this, lhs, rhs);\n  };\n\n  MultiplyOperation.prototype.evaluate = function (c) {\n    return this.lhs.evaluate(c).number().multiply(this.rhs.evaluate(c).number());\n  };\n\n  MultiplyOperation.prototype.toString = function () {\n    return \"(\" + this.lhs.toString() + \" * \" + this.rhs.toString() + \")\";\n  }; // DivOperation //////////////////////////////////////////////////////////////\n\n\n  DivOperation.prototype = new BinaryOperation();\n  DivOperation.prototype.constructor = DivOperation;\n  DivOperation.superclass = BinaryOperation.prototype;\n\n  function DivOperation(lhs, rhs) {\n    if (arguments.length > 0) {\n      this.init(lhs, rhs);\n    }\n  }\n\n  DivOperation.prototype.init = function (lhs, rhs) {\n    DivOperation.superclass.init.call(this, lhs, rhs);\n  };\n\n  DivOperation.prototype.evaluate = function (c) {\n    return this.lhs.evaluate(c).number().div(this.rhs.evaluate(c).number());\n  };\n\n  DivOperation.prototype.toString = function () {\n    return \"(\" + this.lhs.toString() + \" div \" + this.rhs.toString() + \")\";\n  }; // ModOperation //////////////////////////////////////////////////////////////\n\n\n  ModOperation.prototype = new BinaryOperation();\n  ModOperation.prototype.constructor = ModOperation;\n  ModOperation.superclass = BinaryOperation.prototype;\n\n  function ModOperation(lhs, rhs) {\n    if (arguments.length > 0) {\n      this.init(lhs, rhs);\n    }\n  }\n\n  ModOperation.prototype.init = function (lhs, rhs) {\n    ModOperation.superclass.init.call(this, lhs, rhs);\n  };\n\n  ModOperation.prototype.evaluate = function (c) {\n    return this.lhs.evaluate(c).number().mod(this.rhs.evaluate(c).number());\n  };\n\n  ModOperation.prototype.toString = function () {\n    return \"(\" + this.lhs.toString() + \" mod \" + this.rhs.toString() + \")\";\n  }; // BarOperation //////////////////////////////////////////////////////////////\n\n\n  BarOperation.prototype = new BinaryOperation();\n  BarOperation.prototype.constructor = BarOperation;\n  BarOperation.superclass = BinaryOperation.prototype;\n\n  function BarOperation(lhs, rhs) {\n    if (arguments.length > 0) {\n      this.init(lhs, rhs);\n    }\n  }\n\n  BarOperation.prototype.init = function (lhs, rhs) {\n    BarOperation.superclass.init.call(this, lhs, rhs);\n  };\n\n  BarOperation.prototype.evaluate = function (c) {\n    return this.lhs.evaluate(c).nodeset().union(this.rhs.evaluate(c).nodeset());\n  };\n\n  BarOperation.prototype.toString = function () {\n    return map(toString, [this.lhs, this.rhs]).join(' | ');\n  }; // PathExpr //////////////////////////////////////////////////////////////////\n\n\n  PathExpr.prototype = new Expression();\n  PathExpr.prototype.constructor = PathExpr;\n  PathExpr.superclass = Expression.prototype;\n\n  function PathExpr(filter, filterPreds, locpath) {\n    if (arguments.length > 0) {\n      this.init(filter, filterPreds, locpath);\n    }\n  }\n\n  PathExpr.prototype.init = function (filter, filterPreds, locpath) {\n    PathExpr.superclass.init.call(this);\n    this.filter = filter;\n    this.filterPredicates = filterPreds;\n    this.locationPath = locpath;\n  };\n  /**\r\n   * Returns the topmost node of the tree containing node\r\n   */\n\n\n  function findRoot(node) {\n    while (node && node.parentNode) {\n      node = node.parentNode;\n    }\n\n    return node;\n  }\n\n  PathExpr.applyPredicates = function (predicates, c, nodes) {\n    return reduce(function (inNodes, pred) {\n      var ctx = c.extend({\n        contextSize: inNodes.length\n      });\n      return filter(function (node, i) {\n        return PathExpr.predicateMatches(pred, ctx.extend({\n          contextNode: node,\n          contextPosition: i + 1\n        }));\n      }, inNodes);\n    }, nodes, predicates);\n  };\n\n  PathExpr.getRoot = function (xpc, nodes) {\n    var firstNode = nodes[0];\n\n    if (firstNode.nodeType === 9\n    /*Node.DOCUMENT_NODE*/\n    ) {\n        return firstNode;\n      }\n\n    if (xpc.virtualRoot) {\n      return xpc.virtualRoot;\n    }\n\n    var ownerDoc = firstNode.ownerDocument;\n\n    if (ownerDoc) {\n      return ownerDoc;\n    } // IE 5.5 doesn't have ownerDocument?\n\n\n    var n = firstNode;\n\n    while (n.parentNode != null) {\n      n = n.parentNode;\n    }\n\n    return n;\n  };\n\n  PathExpr.applyStep = function (step, xpc, node) {\n    var self = this;\n    var newNodes = [];\n    xpc.contextNode = node;\n\n    switch (step.axis) {\n      case Step.ANCESTOR:\n        // look at all the ancestor nodes\n        if (xpc.contextNode === xpc.virtualRoot) {\n          break;\n        }\n\n        var m;\n\n        if (xpc.contextNode.nodeType == 2\n        /*Node.ATTRIBUTE_NODE*/\n        ) {\n            m = PathExpr.getOwnerElement(xpc.contextNode);\n          } else {\n          m = xpc.contextNode.parentNode;\n        }\n\n        while (m != null) {\n          if (step.nodeTest.matches(m, xpc)) {\n            newNodes.push(m);\n          }\n\n          if (m === xpc.virtualRoot) {\n            break;\n          }\n\n          m = m.parentNode;\n        }\n\n        break;\n\n      case Step.ANCESTORORSELF:\n        // look at all the ancestor nodes and the current node\n        for (var m = xpc.contextNode; m != null; m = m.nodeType == 2\n        /*Node.ATTRIBUTE_NODE*/\n        ? PathExpr.getOwnerElement(m) : m.parentNode) {\n          if (step.nodeTest.matches(m, xpc)) {\n            newNodes.push(m);\n          }\n\n          if (m === xpc.virtualRoot) {\n            break;\n          }\n        }\n\n        break;\n\n      case Step.ATTRIBUTE:\n        // look at the attributes\n        var nnm = xpc.contextNode.attributes;\n\n        if (nnm != null) {\n          for (var k = 0; k < nnm.length; k++) {\n            var m = nnm.item(k);\n\n            if (step.nodeTest.matches(m, xpc)) {\n              newNodes.push(m);\n            }\n          }\n        }\n\n        break;\n\n      case Step.CHILD:\n        // look at all child elements\n        for (var m = xpc.contextNode.firstChild; m != null; m = m.nextSibling) {\n          if (step.nodeTest.matches(m, xpc)) {\n            newNodes.push(m);\n          }\n        }\n\n        break;\n\n      case Step.DESCENDANT:\n        // look at all descendant nodes\n        var st = [xpc.contextNode.firstChild];\n\n        while (st.length > 0) {\n          for (var m = st.pop(); m != null;) {\n            if (step.nodeTest.matches(m, xpc)) {\n              newNodes.push(m);\n            }\n\n            if (m.firstChild != null) {\n              st.push(m.nextSibling);\n              m = m.firstChild;\n            } else {\n              m = m.nextSibling;\n            }\n          }\n        }\n\n        break;\n\n      case Step.DESCENDANTORSELF:\n        // look at self\n        if (step.nodeTest.matches(xpc.contextNode, xpc)) {\n          newNodes.push(xpc.contextNode);\n        } // look at all descendant nodes\n\n\n        var st = [xpc.contextNode.firstChild];\n\n        while (st.length > 0) {\n          for (var m = st.pop(); m != null;) {\n            if (step.nodeTest.matches(m, xpc)) {\n              newNodes.push(m);\n            }\n\n            if (m.firstChild != null) {\n              st.push(m.nextSibling);\n              m = m.firstChild;\n            } else {\n              m = m.nextSibling;\n            }\n          }\n        }\n\n        break;\n\n      case Step.FOLLOWING:\n        if (xpc.contextNode === xpc.virtualRoot) {\n          break;\n        }\n\n        var st = [];\n\n        if (xpc.contextNode.firstChild != null) {\n          st.unshift(xpc.contextNode.firstChild);\n        } else {\n          st.unshift(xpc.contextNode.nextSibling);\n        }\n\n        for (var m = xpc.contextNode.parentNode; m != null && m.nodeType != 9\n        /*Node.DOCUMENT_NODE*/\n        && m !== xpc.virtualRoot; m = m.parentNode) {\n          st.unshift(m.nextSibling);\n        }\n\n        do {\n          for (var m = st.pop(); m != null;) {\n            if (step.nodeTest.matches(m, xpc)) {\n              newNodes.push(m);\n            }\n\n            if (m.firstChild != null) {\n              st.push(m.nextSibling);\n              m = m.firstChild;\n            } else {\n              m = m.nextSibling;\n            }\n          }\n        } while (st.length > 0);\n\n        break;\n\n      case Step.FOLLOWINGSIBLING:\n        if (xpc.contextNode === xpc.virtualRoot) {\n          break;\n        }\n\n        for (var m = xpc.contextNode.nextSibling; m != null; m = m.nextSibling) {\n          if (step.nodeTest.matches(m, xpc)) {\n            newNodes.push(m);\n          }\n        }\n\n        break;\n\n      case Step.NAMESPACE:\n        var n = {};\n\n        if (xpc.contextNode.nodeType == 1\n        /*Node.ELEMENT_NODE*/\n        ) {\n            n[\"xml\"] = XPath.XML_NAMESPACE_URI;\n            n[\"xmlns\"] = XPath.XMLNS_NAMESPACE_URI;\n\n            for (var m = xpc.contextNode; m != null && m.nodeType == 1\n            /*Node.ELEMENT_NODE*/\n            ; m = m.parentNode) {\n              for (var k = 0; k < m.attributes.length; k++) {\n                var attr = m.attributes.item(k);\n                var nm = String(attr.name);\n\n                if (nm == \"xmlns\") {\n                  if (n[\"\"] == undefined) {\n                    n[\"\"] = attr.value;\n                  }\n                } else if (nm.length > 6 && nm.substring(0, 6) == \"xmlns:\") {\n                  var pre = nm.substring(6, nm.length);\n\n                  if (n[pre] == undefined) {\n                    n[pre] = attr.value;\n                  }\n                }\n              }\n            }\n\n            for (var pre in n) {\n              var nsn = new XPathNamespace(pre, n[pre], xpc.contextNode);\n\n              if (step.nodeTest.matches(nsn, xpc)) {\n                newNodes.push(nsn);\n              }\n            }\n          }\n\n        break;\n\n      case Step.PARENT:\n        m = null;\n\n        if (xpc.contextNode !== xpc.virtualRoot) {\n          if (xpc.contextNode.nodeType == 2\n          /*Node.ATTRIBUTE_NODE*/\n          ) {\n              m = PathExpr.getOwnerElement(xpc.contextNode);\n            } else {\n            m = xpc.contextNode.parentNode;\n          }\n        }\n\n        if (m != null && step.nodeTest.matches(m, xpc)) {\n          newNodes.push(m);\n        }\n\n        break;\n\n      case Step.PRECEDING:\n        var st;\n\n        if (xpc.virtualRoot != null) {\n          st = [xpc.virtualRoot];\n        } else {\n          // cannot rely on .ownerDocument because the node may be in a document fragment\n          st = [findRoot(xpc.contextNode)];\n        }\n\n        outer: while (st.length > 0) {\n          for (var m = st.pop(); m != null;) {\n            if (m == xpc.contextNode) {\n              break outer;\n            }\n\n            if (step.nodeTest.matches(m, xpc)) {\n              newNodes.unshift(m);\n            }\n\n            if (m.firstChild != null) {\n              st.push(m.nextSibling);\n              m = m.firstChild;\n            } else {\n              m = m.nextSibling;\n            }\n          }\n        }\n\n        break;\n\n      case Step.PRECEDINGSIBLING:\n        if (xpc.contextNode === xpc.virtualRoot) {\n          break;\n        }\n\n        for (var m = xpc.contextNode.previousSibling; m != null; m = m.previousSibling) {\n          if (step.nodeTest.matches(m, xpc)) {\n            newNodes.push(m);\n          }\n        }\n\n        break;\n\n      case Step.SELF:\n        if (step.nodeTest.matches(xpc.contextNode, xpc)) {\n          newNodes.push(xpc.contextNode);\n        }\n\n        break;\n\n      default:\n    }\n\n    return newNodes;\n  };\n\n  PathExpr.applySteps = function (steps, xpc, nodes) {\n    return reduce(function (inNodes, step) {\n      return [].concat.apply([], map(function (node) {\n        return PathExpr.applyPredicates(step.predicates, xpc, PathExpr.applyStep(step, xpc, node));\n      }, inNodes));\n    }, nodes, steps);\n  };\n\n  PathExpr.prototype.applyFilter = function (c, xpc) {\n    if (!this.filter) {\n      return {\n        nodes: [c.contextNode]\n      };\n    }\n\n    var ns = this.filter.evaluate(c);\n\n    if (!Utilities.instance_of(ns, XNodeSet)) {\n      if (this.filterPredicates != null && this.filterPredicates.length > 0 || this.locationPath != null) {\n        throw new Error(\"Path expression filter must evaluate to a nodeset if predicates or location path are used\");\n      }\n\n      return {\n        nonNodes: ns\n      };\n    }\n\n    return {\n      nodes: PathExpr.applyPredicates(this.filterPredicates || [], xpc, ns.toUnsortedArray())\n    };\n  };\n\n  PathExpr.applyLocationPath = function (locationPath, xpc, nodes) {\n    if (!locationPath) {\n      return nodes;\n    }\n\n    var startNodes = locationPath.absolute ? [PathExpr.getRoot(xpc, nodes)] : nodes;\n    return PathExpr.applySteps(locationPath.steps, xpc, startNodes);\n  };\n\n  PathExpr.prototype.evaluate = function (c) {\n    var xpc = assign(new XPathContext(), c);\n    var filterResult = this.applyFilter(c, xpc);\n\n    if ('nonNodes' in filterResult) {\n      return filterResult.nonNodes;\n    }\n\n    var ns = new XNodeSet();\n    ns.addArray(PathExpr.applyLocationPath(this.locationPath, xpc, filterResult.nodes));\n    return ns;\n  };\n\n  PathExpr.predicateMatches = function (pred, c) {\n    var res = pred.evaluate(c);\n    return Utilities.instance_of(res, XNumber) ? c.contextPosition == res.numberValue() : res.booleanValue();\n  };\n\n  PathExpr.predicateString = compose(wrap('[', ']'), toString);\n  PathExpr.predicatesString = compose(join(''), map(PathExpr.predicateString));\n\n  PathExpr.prototype.toString = function () {\n    if (this.filter != undefined) {\n      var filterStr = toString(this.filter);\n\n      if (Utilities.instance_of(this.filter, XString)) {\n        return wrap(\"'\", \"'\", filterStr);\n      }\n\n      if (this.filterPredicates != undefined && this.filterPredicates.length) {\n        return wrap('(', ')', filterStr) + PathExpr.predicatesString(this.filterPredicates);\n      }\n\n      if (this.locationPath != undefined) {\n        return filterStr + (this.locationPath.absolute ? '' : '/') + toString(this.locationPath);\n      }\n\n      return filterStr;\n    }\n\n    return toString(this.locationPath);\n  };\n\n  PathExpr.getOwnerElement = function (n) {\n    // DOM 2 has ownerElement\n    if (n.ownerElement) {\n      return n.ownerElement;\n    } // DOM 1 Internet Explorer can use selectSingleNode (ironically)\n\n\n    try {\n      if (n.selectSingleNode) {\n        return n.selectSingleNode(\"..\");\n      }\n    } catch (e) {} // Other DOM 1 implementations must use this egregious search\n\n\n    var doc = n.nodeType == 9\n    /*Node.DOCUMENT_NODE*/\n    ? n : n.ownerDocument;\n    var elts = doc.getElementsByTagName(\"*\");\n\n    for (var i = 0; i < elts.length; i++) {\n      var elt = elts.item(i);\n      var nnm = elt.attributes;\n\n      for (var j = 0; j < nnm.length; j++) {\n        var an = nnm.item(j);\n\n        if (an === n) {\n          return elt;\n        }\n      }\n    }\n\n    return null;\n  }; // LocationPath //////////////////////////////////////////////////////////////\n\n\n  LocationPath.prototype = new Object();\n  LocationPath.prototype.constructor = LocationPath;\n  LocationPath.superclass = Object.prototype;\n\n  function LocationPath(abs, steps) {\n    if (arguments.length > 0) {\n      this.init(abs, steps);\n    }\n  }\n\n  LocationPath.prototype.init = function (abs, steps) {\n    this.absolute = abs;\n    this.steps = steps;\n  };\n\n  LocationPath.prototype.toString = function () {\n    return (this.absolute ? '/' : '') + map(toString, this.steps).join('/');\n  }; // Step //////////////////////////////////////////////////////////////////////\n\n\n  Step.prototype = new Object();\n  Step.prototype.constructor = Step;\n  Step.superclass = Object.prototype;\n\n  function Step(axis, nodetest, preds) {\n    if (arguments.length > 0) {\n      this.init(axis, nodetest, preds);\n    }\n  }\n\n  Step.prototype.init = function (axis, nodetest, preds) {\n    this.axis = axis;\n    this.nodeTest = nodetest;\n    this.predicates = preds;\n  };\n\n  Step.prototype.toString = function () {\n    return Step.STEPNAMES[this.axis] + \"::\" + this.nodeTest.toString() + PathExpr.predicatesString(this.predicates);\n  };\n\n  Step.ANCESTOR = 0;\n  Step.ANCESTORORSELF = 1;\n  Step.ATTRIBUTE = 2;\n  Step.CHILD = 3;\n  Step.DESCENDANT = 4;\n  Step.DESCENDANTORSELF = 5;\n  Step.FOLLOWING = 6;\n  Step.FOLLOWINGSIBLING = 7;\n  Step.NAMESPACE = 8;\n  Step.PARENT = 9;\n  Step.PRECEDING = 10;\n  Step.PRECEDINGSIBLING = 11;\n  Step.SELF = 12;\n  Step.STEPNAMES = reduce(function (acc, x) {\n    return acc[x[0]] = x[1], acc;\n  }, {}, [[Step.ANCESTOR, 'ancestor'], [Step.ANCESTORORSELF, 'ancestor-or-self'], [Step.ATTRIBUTE, 'attribute'], [Step.CHILD, 'child'], [Step.DESCENDANT, 'descendant'], [Step.DESCENDANTORSELF, 'descendant-or-self'], [Step.FOLLOWING, 'following'], [Step.FOLLOWINGSIBLING, 'following-sibling'], [Step.NAMESPACE, 'namespace'], [Step.PARENT, 'parent'], [Step.PRECEDING, 'preceding'], [Step.PRECEDINGSIBLING, 'preceding-sibling'], [Step.SELF, 'self']]); // NodeTest //////////////////////////////////////////////////////////////////\n\n  NodeTest.prototype = new Object();\n  NodeTest.prototype.constructor = NodeTest;\n  NodeTest.superclass = Object.prototype;\n\n  function NodeTest(type, value) {\n    if (arguments.length > 0) {\n      this.init(type, value);\n    }\n  }\n\n  NodeTest.prototype.init = function (type, value) {\n    this.type = type;\n    this.value = value;\n  };\n\n  NodeTest.prototype.toString = function () {\n    return \"<unknown nodetest type>\";\n  };\n\n  NodeTest.prototype.matches = function (n, xpc) {\n    console.warn('unknown node test type');\n  };\n\n  NodeTest.NAMETESTANY = 0;\n  NodeTest.NAMETESTPREFIXANY = 1;\n  NodeTest.NAMETESTQNAME = 2;\n  NodeTest.COMMENT = 3;\n  NodeTest.TEXT = 4;\n  NodeTest.PI = 5;\n  NodeTest.NODE = 6;\n\n  NodeTest.isNodeType = function (types) {\n    return compose(includes(types), prop('nodeType'));\n  };\n\n  NodeTest.makeNodeTestType = function (type, members, ctor) {\n    var newType = ctor || function () {};\n\n    newType.prototype = new NodeTest(members.type);\n    newType.prototype.constructor = type;\n\n    for (var key in members) {\n      newType.prototype[key] = members[key];\n    }\n\n    return newType;\n  }; // create invariant node test for certain node types\n\n\n  NodeTest.makeNodeTypeTest = function (type, nodeTypes, stringVal) {\n    return new (NodeTest.makeNodeTestType(type, {\n      matches: NodeTest.isNodeType(nodeTypes),\n      toString: always(stringVal)\n    }))();\n  };\n\n  NodeTest.hasPrefix = function (node) {\n    return node.prefix || (node.nodeName || node.tagName).indexOf(':') !== -1;\n  };\n\n  NodeTest.isElementOrAttribute = NodeTest.isNodeType([1, 2]);\n\n  NodeTest.nameSpaceMatches = function (prefix, xpc, n) {\n    var nNamespace = n.namespaceURI || '';\n\n    if (!prefix) {\n      return !nNamespace || xpc.allowAnyNamespaceForNoPrefix && !NodeTest.hasPrefix(n);\n    }\n\n    var ns = xpc.namespaceResolver.getNamespace(prefix, xpc.expressionContextNode);\n\n    if (ns == null) {\n      throw new Error(\"Cannot resolve QName \" + prefix);\n    }\n\n    return ns === nNamespace;\n  };\n\n  NodeTest.localNameMatches = function (localName, xpc, n) {\n    var nLocalName = n.localName || n.nodeName;\n    return xpc.caseInsensitive ? localName.toLowerCase() === nLocalName.toLowerCase() : localName === nLocalName;\n  };\n\n  NodeTest.NameTestPrefixAny = NodeTest.makeNodeTestType(NodeTest.NAMETESTPREFIXANY, {\n    matches: function (n, xpc) {\n      return NodeTest.isElementOrAttribute(n) && NodeTest.nameSpaceMatches(this.prefix, xpc, n);\n    },\n    toString: function () {\n      return this.prefix + \":*\";\n    }\n  }, function (prefix) {\n    this.prefix = prefix;\n  });\n  NodeTest.NameTestQName = NodeTest.makeNodeTestType(NodeTest.NAMETESTQNAME, {\n    matches: function (n, xpc) {\n      return NodeTest.isNodeType([1, 2, XPathNamespace.XPATH_NAMESPACE_NODE])(n) && NodeTest.nameSpaceMatches(this.prefix, xpc, n) && NodeTest.localNameMatches(this.localName, xpc, n);\n    },\n    toString: function () {\n      return this.name;\n    }\n  }, function (name) {\n    var nameParts = name.split(':');\n    this.name = name;\n    this.prefix = nameParts.length > 1 ? nameParts[0] : null;\n    this.localName = nameParts[nameParts.length > 1 ? 1 : 0];\n  });\n  NodeTest.PITest = NodeTest.makeNodeTestType(NodeTest.PI, {\n    matches: function (n, xpc) {\n      return NodeTest.isNodeType([7])(n) && (n.target || n.nodeName) === this.name;\n    },\n    toString: function () {\n      return wrap('processing-instruction(\"', '\")', this.name);\n    }\n  }, function (name) {\n    this.name = name;\n  }); // singletons\n  // elements, attributes, namespaces\n\n  NodeTest.nameTestAny = NodeTest.makeNodeTypeTest(NodeTest.NAMETESTANY, [1, 2, XPathNamespace.XPATH_NAMESPACE_NODE], '*'); // text, cdata\n\n  NodeTest.textTest = NodeTest.makeNodeTypeTest(NodeTest.TEXT, [3, 4], 'text()');\n  NodeTest.commentTest = NodeTest.makeNodeTypeTest(NodeTest.COMMENT, [8], 'comment()'); // elements, attributes, text, cdata, PIs, comments, document nodes\n\n  NodeTest.nodeTest = NodeTest.makeNodeTypeTest(NodeTest.NODE, [1, 2, 3, 4, 7, 8, 9], 'node()');\n  NodeTest.anyPiTest = NodeTest.makeNodeTypeTest(NodeTest.PI, [7], 'processing-instruction()'); // VariableReference /////////////////////////////////////////////////////////\n\n  VariableReference.prototype = new Expression();\n  VariableReference.prototype.constructor = VariableReference;\n  VariableReference.superclass = Expression.prototype;\n\n  function VariableReference(v) {\n    if (arguments.length > 0) {\n      this.init(v);\n    }\n  }\n\n  VariableReference.prototype.init = function (v) {\n    this.variable = v;\n  };\n\n  VariableReference.prototype.toString = function () {\n    return \"$\" + this.variable;\n  };\n\n  VariableReference.prototype.evaluate = function (c) {\n    var parts = Utilities.resolveQName(this.variable, c.namespaceResolver, c.contextNode, false);\n\n    if (parts[0] == null) {\n      throw new Error(\"Cannot resolve QName \" + fn);\n    }\n\n    var result = c.variableResolver.getVariable(parts[1], parts[0]);\n\n    if (!result) {\n      throw XPathException.fromMessage(\"Undeclared variable: \" + this.toString());\n    }\n\n    return result;\n  }; // FunctionCall //////////////////////////////////////////////////////////////\n\n\n  FunctionCall.prototype = new Expression();\n  FunctionCall.prototype.constructor = FunctionCall;\n  FunctionCall.superclass = Expression.prototype;\n\n  function FunctionCall(fn, args) {\n    if (arguments.length > 0) {\n      this.init(fn, args);\n    }\n  }\n\n  FunctionCall.prototype.init = function (fn, args) {\n    this.functionName = fn;\n    this.arguments = args;\n  };\n\n  FunctionCall.prototype.toString = function () {\n    var s = this.functionName + \"(\";\n\n    for (var i = 0; i < this.arguments.length; i++) {\n      if (i > 0) {\n        s += \", \";\n      }\n\n      s += this.arguments[i].toString();\n    }\n\n    return s + \")\";\n  };\n\n  FunctionCall.prototype.evaluate = function (c) {\n    var f = FunctionResolver.getFunctionFromContext(this.functionName, c);\n\n    if (!f) {\n      throw new Error(\"Unknown function \" + this.functionName);\n    }\n\n    var a = [c].concat(this.arguments);\n    return f.apply(c.functionResolver.thisArg, a);\n  }; // Operators /////////////////////////////////////////////////////////////////\n\n\n  var Operators = new Object();\n\n  Operators.equals = function (l, r) {\n    return l.equals(r);\n  };\n\n  Operators.notequal = function (l, r) {\n    return l.notequal(r);\n  };\n\n  Operators.lessthan = function (l, r) {\n    return l.lessthan(r);\n  };\n\n  Operators.greaterthan = function (l, r) {\n    return l.greaterthan(r);\n  };\n\n  Operators.lessthanorequal = function (l, r) {\n    return l.lessthanorequal(r);\n  };\n\n  Operators.greaterthanorequal = function (l, r) {\n    return l.greaterthanorequal(r);\n  }; // XString ///////////////////////////////////////////////////////////////////\n\n\n  XString.prototype = new Expression();\n  XString.prototype.constructor = XString;\n  XString.superclass = Expression.prototype;\n\n  function XString(s) {\n    if (arguments.length > 0) {\n      this.init(s);\n    }\n  }\n\n  XString.prototype.init = function (s) {\n    this.str = String(s);\n  };\n\n  XString.prototype.toString = function () {\n    return this.str;\n  };\n\n  XString.prototype.evaluate = function (c) {\n    return this;\n  };\n\n  XString.prototype.string = function () {\n    return this;\n  };\n\n  XString.prototype.number = function () {\n    return new XNumber(this.str);\n  };\n\n  XString.prototype.bool = function () {\n    return new XBoolean(this.str);\n  };\n\n  XString.prototype.nodeset = function () {\n    throw new Error(\"Cannot convert string to nodeset\");\n  };\n\n  XString.prototype.stringValue = function () {\n    return this.str;\n  };\n\n  XString.prototype.numberValue = function () {\n    return this.number().numberValue();\n  };\n\n  XString.prototype.booleanValue = function () {\n    return this.bool().booleanValue();\n  };\n\n  XString.prototype.equals = function (r) {\n    if (Utilities.instance_of(r, XBoolean)) {\n      return this.bool().equals(r);\n    }\n\n    if (Utilities.instance_of(r, XNumber)) {\n      return this.number().equals(r);\n    }\n\n    if (Utilities.instance_of(r, XNodeSet)) {\n      return r.compareWithString(this, Operators.equals);\n    }\n\n    return new XBoolean(this.str == r.str);\n  };\n\n  XString.prototype.notequal = function (r) {\n    if (Utilities.instance_of(r, XBoolean)) {\n      return this.bool().notequal(r);\n    }\n\n    if (Utilities.instance_of(r, XNumber)) {\n      return this.number().notequal(r);\n    }\n\n    if (Utilities.instance_of(r, XNodeSet)) {\n      return r.compareWithString(this, Operators.notequal);\n    }\n\n    return new XBoolean(this.str != r.str);\n  };\n\n  XString.prototype.lessthan = function (r) {\n    return this.number().lessthan(r);\n  };\n\n  XString.prototype.greaterthan = function (r) {\n    return this.number().greaterthan(r);\n  };\n\n  XString.prototype.lessthanorequal = function (r) {\n    return this.number().lessthanorequal(r);\n  };\n\n  XString.prototype.greaterthanorequal = function (r) {\n    return this.number().greaterthanorequal(r);\n  }; // XNumber ///////////////////////////////////////////////////////////////////\n\n\n  XNumber.prototype = new Expression();\n  XNumber.prototype.constructor = XNumber;\n  XNumber.superclass = Expression.prototype;\n\n  function XNumber(n) {\n    if (arguments.length > 0) {\n      this.init(n);\n    }\n  }\n\n  XNumber.prototype.init = function (n) {\n    this.num = typeof n === \"string\" ? this.parse(n) : Number(n);\n  };\n\n  XNumber.prototype.numberFormat = /^\\s*-?[0-9]*\\.?[0-9]+\\s*$/;\n\n  XNumber.prototype.parse = function (s) {\n    // XPath representation of numbers is more restrictive than what Number() or parseFloat() allow\n    return this.numberFormat.test(s) ? parseFloat(s) : Number.NaN;\n  };\n\n  function padSmallNumber(numberStr) {\n    var parts = numberStr.split('e-');\n    var base = parts[0].replace('.', '');\n    var exponent = Number(parts[1]);\n\n    for (var i = 0; i < exponent - 1; i += 1) {\n      base = '0' + base;\n    }\n\n    return '0.' + base;\n  }\n\n  function padLargeNumber(numberStr) {\n    var parts = numberStr.split('e');\n    var base = parts[0].replace('.', '');\n    var exponent = Number(parts[1]);\n    var zerosToAppend = exponent + 1 - base.length;\n\n    for (var i = 0; i < zerosToAppend; i += 1) {\n      base += '0';\n    }\n\n    return base;\n  }\n\n  XNumber.prototype.toString = function () {\n    var strValue = this.num.toString();\n\n    if (strValue.indexOf('e-') !== -1) {\n      return padSmallNumber(strValue);\n    }\n\n    if (strValue.indexOf('e') !== -1) {\n      return padLargeNumber(strValue);\n    }\n\n    return strValue;\n  };\n\n  XNumber.prototype.evaluate = function (c) {\n    return this;\n  };\n\n  XNumber.prototype.string = function () {\n    return new XString(this.toString());\n  };\n\n  XNumber.prototype.number = function () {\n    return this;\n  };\n\n  XNumber.prototype.bool = function () {\n    return new XBoolean(this.num);\n  };\n\n  XNumber.prototype.nodeset = function () {\n    throw new Error(\"Cannot convert number to nodeset\");\n  };\n\n  XNumber.prototype.stringValue = function () {\n    return this.string().stringValue();\n  };\n\n  XNumber.prototype.numberValue = function () {\n    return this.num;\n  };\n\n  XNumber.prototype.booleanValue = function () {\n    return this.bool().booleanValue();\n  };\n\n  XNumber.prototype.negate = function () {\n    return new XNumber(-this.num);\n  };\n\n  XNumber.prototype.equals = function (r) {\n    if (Utilities.instance_of(r, XBoolean)) {\n      return this.bool().equals(r);\n    }\n\n    if (Utilities.instance_of(r, XString)) {\n      return this.equals(r.number());\n    }\n\n    if (Utilities.instance_of(r, XNodeSet)) {\n      return r.compareWithNumber(this, Operators.equals);\n    }\n\n    return new XBoolean(this.num == r.num);\n  };\n\n  XNumber.prototype.notequal = function (r) {\n    if (Utilities.instance_of(r, XBoolean)) {\n      return this.bool().notequal(r);\n    }\n\n    if (Utilities.instance_of(r, XString)) {\n      return this.notequal(r.number());\n    }\n\n    if (Utilities.instance_of(r, XNodeSet)) {\n      return r.compareWithNumber(this, Operators.notequal);\n    }\n\n    return new XBoolean(this.num != r.num);\n  };\n\n  XNumber.prototype.lessthan = function (r) {\n    if (Utilities.instance_of(r, XNodeSet)) {\n      return r.compareWithNumber(this, Operators.greaterthan);\n    }\n\n    if (Utilities.instance_of(r, XBoolean) || Utilities.instance_of(r, XString)) {\n      return this.lessthan(r.number());\n    }\n\n    return new XBoolean(this.num < r.num);\n  };\n\n  XNumber.prototype.greaterthan = function (r) {\n    if (Utilities.instance_of(r, XNodeSet)) {\n      return r.compareWithNumber(this, Operators.lessthan);\n    }\n\n    if (Utilities.instance_of(r, XBoolean) || Utilities.instance_of(r, XString)) {\n      return this.greaterthan(r.number());\n    }\n\n    return new XBoolean(this.num > r.num);\n  };\n\n  XNumber.prototype.lessthanorequal = function (r) {\n    if (Utilities.instance_of(r, XNodeSet)) {\n      return r.compareWithNumber(this, Operators.greaterthanorequal);\n    }\n\n    if (Utilities.instance_of(r, XBoolean) || Utilities.instance_of(r, XString)) {\n      return this.lessthanorequal(r.number());\n    }\n\n    return new XBoolean(this.num <= r.num);\n  };\n\n  XNumber.prototype.greaterthanorequal = function (r) {\n    if (Utilities.instance_of(r, XNodeSet)) {\n      return r.compareWithNumber(this, Operators.lessthanorequal);\n    }\n\n    if (Utilities.instance_of(r, XBoolean) || Utilities.instance_of(r, XString)) {\n      return this.greaterthanorequal(r.number());\n    }\n\n    return new XBoolean(this.num >= r.num);\n  };\n\n  XNumber.prototype.plus = function (r) {\n    return new XNumber(this.num + r.num);\n  };\n\n  XNumber.prototype.minus = function (r) {\n    return new XNumber(this.num - r.num);\n  };\n\n  XNumber.prototype.multiply = function (r) {\n    return new XNumber(this.num * r.num);\n  };\n\n  XNumber.prototype.div = function (r) {\n    return new XNumber(this.num / r.num);\n  };\n\n  XNumber.prototype.mod = function (r) {\n    return new XNumber(this.num % r.num);\n  }; // XBoolean //////////////////////////////////////////////////////////////////\n\n\n  XBoolean.prototype = new Expression();\n  XBoolean.prototype.constructor = XBoolean;\n  XBoolean.superclass = Expression.prototype;\n\n  function XBoolean(b) {\n    if (arguments.length > 0) {\n      this.init(b);\n    }\n  }\n\n  XBoolean.prototype.init = function (b) {\n    this.b = Boolean(b);\n  };\n\n  XBoolean.prototype.toString = function () {\n    return this.b.toString();\n  };\n\n  XBoolean.prototype.evaluate = function (c) {\n    return this;\n  };\n\n  XBoolean.prototype.string = function () {\n    return new XString(this.b);\n  };\n\n  XBoolean.prototype.number = function () {\n    return new XNumber(this.b);\n  };\n\n  XBoolean.prototype.bool = function () {\n    return this;\n  };\n\n  XBoolean.prototype.nodeset = function () {\n    throw new Error(\"Cannot convert boolean to nodeset\");\n  };\n\n  XBoolean.prototype.stringValue = function () {\n    return this.string().stringValue();\n  };\n\n  XBoolean.prototype.numberValue = function () {\n    return this.number().numberValue();\n  };\n\n  XBoolean.prototype.booleanValue = function () {\n    return this.b;\n  };\n\n  XBoolean.prototype.not = function () {\n    return new XBoolean(!this.b);\n  };\n\n  XBoolean.prototype.equals = function (r) {\n    if (Utilities.instance_of(r, XString) || Utilities.instance_of(r, XNumber)) {\n      return this.equals(r.bool());\n    }\n\n    if (Utilities.instance_of(r, XNodeSet)) {\n      return r.compareWithBoolean(this, Operators.equals);\n    }\n\n    return new XBoolean(this.b == r.b);\n  };\n\n  XBoolean.prototype.notequal = function (r) {\n    if (Utilities.instance_of(r, XString) || Utilities.instance_of(r, XNumber)) {\n      return this.notequal(r.bool());\n    }\n\n    if (Utilities.instance_of(r, XNodeSet)) {\n      return r.compareWithBoolean(this, Operators.notequal);\n    }\n\n    return new XBoolean(this.b != r.b);\n  };\n\n  XBoolean.prototype.lessthan = function (r) {\n    return this.number().lessthan(r);\n  };\n\n  XBoolean.prototype.greaterthan = function (r) {\n    return this.number().greaterthan(r);\n  };\n\n  XBoolean.prototype.lessthanorequal = function (r) {\n    return this.number().lessthanorequal(r);\n  };\n\n  XBoolean.prototype.greaterthanorequal = function (r) {\n    return this.number().greaterthanorequal(r);\n  };\n\n  XBoolean.true_ = new XBoolean(true);\n  XBoolean.false_ = new XBoolean(false); // AVLTree ///////////////////////////////////////////////////////////////////\n\n  AVLTree.prototype = new Object();\n  AVLTree.prototype.constructor = AVLTree;\n  AVLTree.superclass = Object.prototype;\n\n  function AVLTree(n) {\n    this.init(n);\n  }\n\n  AVLTree.prototype.init = function (n) {\n    this.left = null;\n    this.right = null;\n    this.node = n;\n    this.depth = 1;\n  };\n\n  AVLTree.prototype.balance = function () {\n    var ldepth = this.left == null ? 0 : this.left.depth;\n    var rdepth = this.right == null ? 0 : this.right.depth;\n\n    if (ldepth > rdepth + 1) {\n      // LR or LL rotation\n      var lldepth = this.left.left == null ? 0 : this.left.left.depth;\n      var lrdepth = this.left.right == null ? 0 : this.left.right.depth;\n\n      if (lldepth < lrdepth) {\n        // LR rotation consists of a RR rotation of the left child\n        this.left.rotateRR(); // plus a LL rotation of this node, which happens anyway\n      }\n\n      this.rotateLL();\n    } else if (ldepth + 1 < rdepth) {\n      // RR or RL rorarion\n      var rrdepth = this.right.right == null ? 0 : this.right.right.depth;\n      var rldepth = this.right.left == null ? 0 : this.right.left.depth;\n\n      if (rldepth > rrdepth) {\n        // RR rotation consists of a LL rotation of the right child\n        this.right.rotateLL(); // plus a RR rotation of this node, which happens anyway\n      }\n\n      this.rotateRR();\n    }\n  };\n\n  AVLTree.prototype.rotateLL = function () {\n    // the left side is too long => rotate from the left (_not_ leftwards)\n    var nodeBefore = this.node;\n    var rightBefore = this.right;\n    this.node = this.left.node;\n    this.right = this.left;\n    this.left = this.left.left;\n    this.right.left = this.right.right;\n    this.right.right = rightBefore;\n    this.right.node = nodeBefore;\n    this.right.updateInNewLocation();\n    this.updateInNewLocation();\n  };\n\n  AVLTree.prototype.rotateRR = function () {\n    // the right side is too long => rotate from the right (_not_ rightwards)\n    var nodeBefore = this.node;\n    var leftBefore = this.left;\n    this.node = this.right.node;\n    this.left = this.right;\n    this.right = this.right.right;\n    this.left.right = this.left.left;\n    this.left.left = leftBefore;\n    this.left.node = nodeBefore;\n    this.left.updateInNewLocation();\n    this.updateInNewLocation();\n  };\n\n  AVLTree.prototype.updateInNewLocation = function () {\n    this.getDepthFromChildren();\n  };\n\n  AVLTree.prototype.getDepthFromChildren = function () {\n    this.depth = this.node == null ? 0 : 1;\n\n    if (this.left != null) {\n      this.depth = this.left.depth + 1;\n    }\n\n    if (this.right != null && this.depth <= this.right.depth) {\n      this.depth = this.right.depth + 1;\n    }\n  };\n\n  function nodeOrder(n1, n2) {\n    if (n1 === n2) {\n      return 0;\n    }\n\n    if (n1.compareDocumentPosition) {\n      var cpos = n1.compareDocumentPosition(n2);\n\n      if (cpos & 0x01) {\n        // not in the same document; return an arbitrary result (is there a better way to do this)\n        return 1;\n      }\n\n      if (cpos & 0x0A) {\n        // n2 precedes or contains n1\n        return 1;\n      }\n\n      if (cpos & 0x14) {\n        // n2 follows or is contained by n1\n        return -1;\n      }\n\n      return 0;\n    }\n\n    var d1 = 0,\n        d2 = 0;\n\n    for (var m1 = n1; m1 != null; m1 = m1.parentNode || m1.ownerElement) {\n      d1++;\n    }\n\n    for (var m2 = n2; m2 != null; m2 = m2.parentNode || m2.ownerElement) {\n      d2++;\n    } // step up to same depth\n\n\n    if (d1 > d2) {\n      while (d1 > d2) {\n        n1 = n1.parentNode || n1.ownerElement;\n        d1--;\n      }\n\n      if (n1 === n2) {\n        return 1;\n      }\n    } else if (d2 > d1) {\n      while (d2 > d1) {\n        n2 = n2.parentNode || n2.ownerElement;\n        d2--;\n      }\n\n      if (n1 === n2) {\n        return -1;\n      }\n    }\n\n    var n1Par = n1.parentNode || n1.ownerElement,\n        n2Par = n2.parentNode || n2.ownerElement; // find common parent\n\n    while (n1Par !== n2Par) {\n      n1 = n1Par;\n      n2 = n2Par;\n      n1Par = n1.parentNode || n1.ownerElement;\n      n2Par = n2.parentNode || n2.ownerElement;\n    }\n\n    var n1isAttr = Utilities.isAttribute(n1);\n    var n2isAttr = Utilities.isAttribute(n2);\n\n    if (n1isAttr && !n2isAttr) {\n      return -1;\n    }\n\n    if (!n1isAttr && n2isAttr) {\n      return 1;\n    }\n\n    if (n1Par) {\n      var cn = n1isAttr ? n1Par.attributes : n1Par.childNodes,\n          len = cn.length;\n\n      for (var i = 0; i < len; i += 1) {\n        var n = cn[i];\n\n        if (n === n1) {\n          return -1;\n        }\n\n        if (n === n2) {\n          return 1;\n        }\n      }\n    }\n\n    throw new Error('Unexpected: could not determine node order');\n  }\n\n  AVLTree.prototype.add = function (n) {\n    if (n === this.node) {\n      return false;\n    }\n\n    var o = nodeOrder(n, this.node);\n    var ret = false;\n\n    if (o == -1) {\n      if (this.left == null) {\n        this.left = new AVLTree(n);\n        ret = true;\n      } else {\n        ret = this.left.add(n);\n\n        if (ret) {\n          this.balance();\n        }\n      }\n    } else if (o == 1) {\n      if (this.right == null) {\n        this.right = new AVLTree(n);\n        ret = true;\n      } else {\n        ret = this.right.add(n);\n\n        if (ret) {\n          this.balance();\n        }\n      }\n    }\n\n    if (ret) {\n      this.getDepthFromChildren();\n    }\n\n    return ret;\n  }; // XNodeSet //////////////////////////////////////////////////////////////////\n\n\n  XNodeSet.prototype = new Expression();\n  XNodeSet.prototype.constructor = XNodeSet;\n  XNodeSet.superclass = Expression.prototype;\n\n  function XNodeSet() {\n    this.init();\n  }\n\n  XNodeSet.prototype.init = function () {\n    this.tree = null;\n    this.nodes = [];\n    this.size = 0;\n  };\n\n  XNodeSet.prototype.toString = function () {\n    var p = this.first();\n\n    if (p == null) {\n      return \"\";\n    }\n\n    return this.stringForNode(p);\n  };\n\n  XNodeSet.prototype.evaluate = function (c) {\n    return this;\n  };\n\n  XNodeSet.prototype.string = function () {\n    return new XString(this.toString());\n  };\n\n  XNodeSet.prototype.stringValue = function () {\n    return this.toString();\n  };\n\n  XNodeSet.prototype.number = function () {\n    return new XNumber(this.string());\n  };\n\n  XNodeSet.prototype.numberValue = function () {\n    return Number(this.string());\n  };\n\n  XNodeSet.prototype.bool = function () {\n    return new XBoolean(this.booleanValue());\n  };\n\n  XNodeSet.prototype.booleanValue = function () {\n    return !!this.size;\n  };\n\n  XNodeSet.prototype.nodeset = function () {\n    return this;\n  };\n\n  XNodeSet.prototype.stringForNode = function (n) {\n    if (n.nodeType == 9\n    /*Node.DOCUMENT_NODE*/\n    || n.nodeType == 1\n    /*Node.ELEMENT_NODE */\n    || n.nodeType === 11\n    /*Node.DOCUMENT_FRAGMENT*/\n    ) {\n        return this.stringForContainerNode(n);\n      }\n\n    if (n.nodeType === 2\n    /* Node.ATTRIBUTE_NODE */\n    ) {\n        return n.value || n.nodeValue;\n      }\n\n    if (n.isNamespaceNode) {\n      return n.namespace;\n    }\n\n    return n.nodeValue;\n  };\n\n  XNodeSet.prototype.stringForContainerNode = function (n) {\n    var s = \"\";\n\n    for (var n2 = n.firstChild; n2 != null; n2 = n2.nextSibling) {\n      var nt = n2.nodeType; //  Element,    Text,       CDATA,      Document,   Document Fragment\n\n      if (nt === 1 || nt === 3 || nt === 4 || nt === 9 || nt === 11) {\n        s += this.stringForNode(n2);\n      }\n    }\n\n    return s;\n  };\n\n  XNodeSet.prototype.buildTree = function () {\n    if (!this.tree && this.nodes.length) {\n      this.tree = new AVLTree(this.nodes[0]);\n\n      for (var i = 1; i < this.nodes.length; i += 1) {\n        this.tree.add(this.nodes[i]);\n      }\n    }\n\n    return this.tree;\n  };\n\n  XNodeSet.prototype.first = function () {\n    var p = this.buildTree();\n\n    if (p == null) {\n      return null;\n    }\n\n    while (p.left != null) {\n      p = p.left;\n    }\n\n    return p.node;\n  };\n\n  XNodeSet.prototype.add = function (n) {\n    for (var i = 0; i < this.nodes.length; i += 1) {\n      if (n === this.nodes[i]) {\n        return;\n      }\n    }\n\n    this.tree = null;\n    this.nodes.push(n);\n    this.size += 1;\n  };\n\n  XNodeSet.prototype.addArray = function (ns) {\n    var self = this;\n    forEach(function (x) {\n      self.add(x);\n    }, ns);\n  };\n  /**\r\n   * Returns an array of the node set's contents in document order\r\n   */\n\n\n  XNodeSet.prototype.toArray = function () {\n    var a = [];\n    this.toArrayRec(this.buildTree(), a);\n    return a;\n  };\n\n  XNodeSet.prototype.toArrayRec = function (t, a) {\n    if (t != null) {\n      this.toArrayRec(t.left, a);\n      a.push(t.node);\n      this.toArrayRec(t.right, a);\n    }\n  };\n  /**\r\n   * Returns an array of the node set's contents in arbitrary order\r\n   */\n\n\n  XNodeSet.prototype.toUnsortedArray = function () {\n    return this.nodes.slice();\n  };\n\n  XNodeSet.prototype.compareWithString = function (r, o) {\n    var a = this.toUnsortedArray();\n\n    for (var i = 0; i < a.length; i++) {\n      var n = a[i];\n      var l = new XString(this.stringForNode(n));\n      var res = o(l, r);\n\n      if (res.booleanValue()) {\n        return res;\n      }\n    }\n\n    return new XBoolean(false);\n  };\n\n  XNodeSet.prototype.compareWithNumber = function (r, o) {\n    var a = this.toUnsortedArray();\n\n    for (var i = 0; i < a.length; i++) {\n      var n = a[i];\n      var l = new XNumber(this.stringForNode(n));\n      var res = o(l, r);\n\n      if (res.booleanValue()) {\n        return res;\n      }\n    }\n\n    return new XBoolean(false);\n  };\n\n  XNodeSet.prototype.compareWithBoolean = function (r, o) {\n    return o(this.bool(), r);\n  };\n\n  XNodeSet.prototype.compareWithNodeSet = function (r, o) {\n    var arr = this.toUnsortedArray();\n\n    var oInvert = function (lop, rop) {\n      return o(rop, lop);\n    };\n\n    for (var i = 0; i < arr.length; i++) {\n      var l = new XString(this.stringForNode(arr[i]));\n      var res = r.compareWithString(l, oInvert);\n\n      if (res.booleanValue()) {\n        return res;\n      }\n    }\n\n    return new XBoolean(false);\n  };\n\n  XNodeSet.compareWith = curry(function (o, r) {\n    if (Utilities.instance_of(r, XString)) {\n      return this.compareWithString(r, o);\n    }\n\n    if (Utilities.instance_of(r, XNumber)) {\n      return this.compareWithNumber(r, o);\n    }\n\n    if (Utilities.instance_of(r, XBoolean)) {\n      return this.compareWithBoolean(r, o);\n    }\n\n    return this.compareWithNodeSet(r, o);\n  });\n  XNodeSet.prototype.equals = XNodeSet.compareWith(Operators.equals);\n  XNodeSet.prototype.notequal = XNodeSet.compareWith(Operators.notequal);\n  XNodeSet.prototype.lessthan = XNodeSet.compareWith(Operators.lessthan);\n  XNodeSet.prototype.greaterthan = XNodeSet.compareWith(Operators.greaterthan);\n  XNodeSet.prototype.lessthanorequal = XNodeSet.compareWith(Operators.lessthanorequal);\n  XNodeSet.prototype.greaterthanorequal = XNodeSet.compareWith(Operators.greaterthanorequal);\n\n  XNodeSet.prototype.union = function (r) {\n    var ns = new XNodeSet();\n    ns.addArray(this.toUnsortedArray());\n    ns.addArray(r.toUnsortedArray());\n    return ns;\n  }; // XPathNamespace ////////////////////////////////////////////////////////////\n\n\n  XPathNamespace.prototype = new Object();\n  XPathNamespace.prototype.constructor = XPathNamespace;\n  XPathNamespace.superclass = Object.prototype;\n\n  function XPathNamespace(pre, ns, p) {\n    this.isXPathNamespace = true;\n    this.ownerDocument = p.ownerDocument;\n    this.nodeName = \"#namespace\";\n    this.prefix = pre;\n    this.localName = pre;\n    this.namespaceURI = ns;\n    this.nodeValue = ns;\n    this.ownerElement = p;\n    this.nodeType = XPathNamespace.XPATH_NAMESPACE_NODE;\n  }\n\n  XPathNamespace.prototype.toString = function () {\n    return \"{ \\\"\" + this.prefix + \"\\\", \\\"\" + this.namespaceURI + \"\\\" }\";\n  }; // XPathContext //////////////////////////////////////////////////////////////\n\n\n  XPathContext.prototype = new Object();\n  XPathContext.prototype.constructor = XPathContext;\n  XPathContext.superclass = Object.prototype;\n\n  function XPathContext(vr, nr, fr) {\n    this.variableResolver = vr != null ? vr : new VariableResolver();\n    this.namespaceResolver = nr != null ? nr : new NamespaceResolver();\n    this.functionResolver = fr != null ? fr : new FunctionResolver();\n  }\n\n  XPathContext.prototype.extend = function (newProps) {\n    return assign(new XPathContext(), this, newProps);\n  }; // VariableResolver //////////////////////////////////////////////////////////\n\n\n  VariableResolver.prototype = new Object();\n  VariableResolver.prototype.constructor = VariableResolver;\n  VariableResolver.superclass = Object.prototype;\n\n  function VariableResolver() {}\n\n  VariableResolver.prototype.getVariable = function (ln, ns) {\n    return null;\n  }; // FunctionResolver //////////////////////////////////////////////////////////\n\n\n  FunctionResolver.prototype = new Object();\n  FunctionResolver.prototype.constructor = FunctionResolver;\n  FunctionResolver.superclass = Object.prototype;\n\n  function FunctionResolver(thisArg) {\n    this.thisArg = thisArg != null ? thisArg : Functions;\n    this.functions = new Object();\n    this.addStandardFunctions();\n  }\n\n  FunctionResolver.prototype.addStandardFunctions = function () {\n    this.functions[\"{}last\"] = Functions.last;\n    this.functions[\"{}position\"] = Functions.position;\n    this.functions[\"{}count\"] = Functions.count;\n    this.functions[\"{}id\"] = Functions.id;\n    this.functions[\"{}local-name\"] = Functions.localName;\n    this.functions[\"{}namespace-uri\"] = Functions.namespaceURI;\n    this.functions[\"{}name\"] = Functions.name;\n    this.functions[\"{}string\"] = Functions.string;\n    this.functions[\"{}concat\"] = Functions.concat;\n    this.functions[\"{}starts-with\"] = Functions.startsWith;\n    this.functions[\"{}contains\"] = Functions.contains;\n    this.functions[\"{}substring-before\"] = Functions.substringBefore;\n    this.functions[\"{}substring-after\"] = Functions.substringAfter;\n    this.functions[\"{}substring\"] = Functions.substring;\n    this.functions[\"{}string-length\"] = Functions.stringLength;\n    this.functions[\"{}normalize-space\"] = Functions.normalizeSpace;\n    this.functions[\"{}translate\"] = Functions.translate;\n    this.functions[\"{}boolean\"] = Functions.boolean_;\n    this.functions[\"{}not\"] = Functions.not;\n    this.functions[\"{}true\"] = Functions.true_;\n    this.functions[\"{}false\"] = Functions.false_;\n    this.functions[\"{}lang\"] = Functions.lang;\n    this.functions[\"{}number\"] = Functions.number;\n    this.functions[\"{}sum\"] = Functions.sum;\n    this.functions[\"{}floor\"] = Functions.floor;\n    this.functions[\"{}ceiling\"] = Functions.ceiling;\n    this.functions[\"{}round\"] = Functions.round;\n  };\n\n  FunctionResolver.prototype.addFunction = function (ns, ln, f) {\n    this.functions[\"{\" + ns + \"}\" + ln] = f;\n  };\n\n  FunctionResolver.getFunctionFromContext = function (qName, context) {\n    var parts = Utilities.resolveQName(qName, context.namespaceResolver, context.contextNode, false);\n\n    if (parts[0] === null) {\n      throw new Error(\"Cannot resolve QName \" + name);\n    }\n\n    return context.functionResolver.getFunction(parts[1], parts[0]);\n  };\n\n  FunctionResolver.prototype.getFunction = function (localName, namespace) {\n    return this.functions[\"{\" + namespace + \"}\" + localName];\n  }; // NamespaceResolver /////////////////////////////////////////////////////////\n\n\n  NamespaceResolver.prototype = new Object();\n  NamespaceResolver.prototype.constructor = NamespaceResolver;\n  NamespaceResolver.superclass = Object.prototype;\n\n  function NamespaceResolver() {}\n\n  NamespaceResolver.prototype.getNamespace = function (prefix, n) {\n    if (prefix == \"xml\") {\n      return XPath.XML_NAMESPACE_URI;\n    } else if (prefix == \"xmlns\") {\n      return XPath.XMLNS_NAMESPACE_URI;\n    }\n\n    if (n.nodeType == 9\n    /*Node.DOCUMENT_NODE*/\n    ) {\n        n = n.documentElement;\n      } else if (n.nodeType == 2\n    /*Node.ATTRIBUTE_NODE*/\n    ) {\n        n = PathExpr.getOwnerElement(n);\n      } else if (n.nodeType != 1\n    /*Node.ELEMENT_NODE*/\n    ) {\n        n = n.parentNode;\n      }\n\n    while (n != null && n.nodeType == 1\n    /*Node.ELEMENT_NODE*/\n    ) {\n      var nnm = n.attributes;\n\n      for (var i = 0; i < nnm.length; i++) {\n        var a = nnm.item(i);\n        var aname = a.name || a.nodeName;\n\n        if (aname === \"xmlns\" && prefix === \"\" || aname === \"xmlns:\" + prefix) {\n          return String(a.value || a.nodeValue);\n        }\n      }\n\n      n = n.parentNode;\n    }\n\n    return null;\n  }; // Functions /////////////////////////////////////////////////////////////////\n\n\n  var Functions = new Object();\n\n  Functions.last = function (c) {\n    if (arguments.length != 1) {\n      throw new Error(\"Function last expects ()\");\n    }\n\n    return new XNumber(c.contextSize);\n  };\n\n  Functions.position = function (c) {\n    if (arguments.length != 1) {\n      throw new Error(\"Function position expects ()\");\n    }\n\n    return new XNumber(c.contextPosition);\n  };\n\n  Functions.count = function () {\n    var c = arguments[0];\n    var ns;\n\n    if (arguments.length != 2 || !Utilities.instance_of(ns = arguments[1].evaluate(c), XNodeSet)) {\n      throw new Error(\"Function count expects (node-set)\");\n    }\n\n    return new XNumber(ns.size);\n  };\n\n  Functions.id = function () {\n    var c = arguments[0];\n    var id;\n\n    if (arguments.length != 2) {\n      throw new Error(\"Function id expects (object)\");\n    }\n\n    id = arguments[1].evaluate(c);\n\n    if (Utilities.instance_of(id, XNodeSet)) {\n      id = id.toArray().join(\" \");\n    } else {\n      id = id.stringValue();\n    }\n\n    var ids = id.split(/[\\x0d\\x0a\\x09\\x20]+/);\n    var count = 0;\n    var ns = new XNodeSet();\n    var doc = c.contextNode.nodeType == 9\n    /*Node.DOCUMENT_NODE*/\n    ? c.contextNode : c.contextNode.ownerDocument;\n\n    for (var i = 0; i < ids.length; i++) {\n      var n;\n\n      if (doc.getElementById) {\n        n = doc.getElementById(ids[i]);\n      } else {\n        n = Utilities.getElementById(doc, ids[i]);\n      }\n\n      if (n != null) {\n        ns.add(n);\n        count++;\n      }\n    }\n\n    return ns;\n  };\n\n  Functions.localName = function (c, eNode) {\n    var n;\n\n    if (arguments.length == 1) {\n      n = c.contextNode;\n    } else if (arguments.length == 2) {\n      n = eNode.evaluate(c).first();\n    } else {\n      throw new Error(\"Function local-name expects (node-set?)\");\n    }\n\n    if (n == null) {\n      return new XString(\"\");\n    }\n\n    return new XString(n.localName || //  standard elements and attributes\n    n.baseName || //  IE\n    n.target || //  processing instructions\n    n.nodeName || //  DOM1 elements\n    \"\"); //  fallback\n  };\n\n  Functions.namespaceURI = function () {\n    var c = arguments[0];\n    var n;\n\n    if (arguments.length == 1) {\n      n = c.contextNode;\n    } else if (arguments.length == 2) {\n      n = arguments[1].evaluate(c).first();\n    } else {\n      throw new Error(\"Function namespace-uri expects (node-set?)\");\n    }\n\n    if (n == null) {\n      return new XString(\"\");\n    }\n\n    return new XString(n.namespaceURI);\n  };\n\n  Functions.name = function () {\n    var c = arguments[0];\n    var n;\n\n    if (arguments.length == 1) {\n      n = c.contextNode;\n    } else if (arguments.length == 2) {\n      n = arguments[1].evaluate(c).first();\n    } else {\n      throw new Error(\"Function name expects (node-set?)\");\n    }\n\n    if (n == null) {\n      return new XString(\"\");\n    }\n\n    if (n.nodeType == 1\n    /*Node.ELEMENT_NODE*/\n    ) {\n        return new XString(n.nodeName);\n      } else if (n.nodeType == 2\n    /*Node.ATTRIBUTE_NODE*/\n    ) {\n        return new XString(n.name || n.nodeName);\n      } else if (n.nodeType === 7\n    /*Node.PROCESSING_INSTRUCTION_NODE*/\n    ) {\n        return new XString(n.target || n.nodeName);\n      } else if (n.localName == null) {\n      return new XString(\"\");\n    } else {\n      return new XString(n.localName);\n    }\n  };\n\n  Functions.string = function () {\n    var c = arguments[0];\n\n    if (arguments.length == 1) {\n      return new XString(XNodeSet.prototype.stringForNode(c.contextNode));\n    } else if (arguments.length == 2) {\n      return arguments[1].evaluate(c).string();\n    }\n\n    throw new Error(\"Function string expects (object?)\");\n  };\n\n  Functions.concat = function (c) {\n    if (arguments.length < 3) {\n      throw new Error(\"Function concat expects (string, string[, string]*)\");\n    }\n\n    var s = \"\";\n\n    for (var i = 1; i < arguments.length; i++) {\n      s += arguments[i].evaluate(c).stringValue();\n    }\n\n    return new XString(s);\n  };\n\n  Functions.startsWith = function () {\n    var c = arguments[0];\n\n    if (arguments.length != 3) {\n      throw new Error(\"Function startsWith expects (string, string)\");\n    }\n\n    var s1 = arguments[1].evaluate(c).stringValue();\n    var s2 = arguments[2].evaluate(c).stringValue();\n    return new XBoolean(s1.substring(0, s2.length) == s2);\n  };\n\n  Functions.contains = function () {\n    var c = arguments[0];\n\n    if (arguments.length != 3) {\n      throw new Error(\"Function contains expects (string, string)\");\n    }\n\n    var s1 = arguments[1].evaluate(c).stringValue();\n    var s2 = arguments[2].evaluate(c).stringValue();\n    return new XBoolean(s1.indexOf(s2) !== -1);\n  };\n\n  Functions.substringBefore = function () {\n    var c = arguments[0];\n\n    if (arguments.length != 3) {\n      throw new Error(\"Function substring-before expects (string, string)\");\n    }\n\n    var s1 = arguments[1].evaluate(c).stringValue();\n    var s2 = arguments[2].evaluate(c).stringValue();\n    return new XString(s1.substring(0, s1.indexOf(s2)));\n  };\n\n  Functions.substringAfter = function () {\n    var c = arguments[0];\n\n    if (arguments.length != 3) {\n      throw new Error(\"Function substring-after expects (string, string)\");\n    }\n\n    var s1 = arguments[1].evaluate(c).stringValue();\n    var s2 = arguments[2].evaluate(c).stringValue();\n\n    if (s2.length == 0) {\n      return new XString(s1);\n    }\n\n    var i = s1.indexOf(s2);\n\n    if (i == -1) {\n      return new XString(\"\");\n    }\n\n    return new XString(s1.substring(i + s2.length));\n  };\n\n  Functions.substring = function () {\n    var c = arguments[0];\n\n    if (!(arguments.length == 3 || arguments.length == 4)) {\n      throw new Error(\"Function substring expects (string, number, number?)\");\n    }\n\n    var s = arguments[1].evaluate(c).stringValue();\n    var n1 = Math.round(arguments[2].evaluate(c).numberValue()) - 1;\n    var n2 = arguments.length == 4 ? n1 + Math.round(arguments[3].evaluate(c).numberValue()) : undefined;\n    return new XString(s.substring(n1, n2));\n  };\n\n  Functions.stringLength = function () {\n    var c = arguments[0];\n    var s;\n\n    if (arguments.length == 1) {\n      s = XNodeSet.prototype.stringForNode(c.contextNode);\n    } else if (arguments.length == 2) {\n      s = arguments[1].evaluate(c).stringValue();\n    } else {\n      throw new Error(\"Function string-length expects (string?)\");\n    }\n\n    return new XNumber(s.length);\n  };\n\n  Functions.normalizeSpace = function () {\n    var c = arguments[0];\n    var s;\n\n    if (arguments.length == 1) {\n      s = XNodeSet.prototype.stringForNode(c.contextNode);\n    } else if (arguments.length == 2) {\n      s = arguments[1].evaluate(c).stringValue();\n    } else {\n      throw new Error(\"Function normalize-space expects (string?)\");\n    }\n\n    var i = 0;\n    var j = s.length - 1;\n\n    while (Utilities.isSpace(s.charCodeAt(j))) {\n      j--;\n    }\n\n    var t = \"\";\n\n    while (i <= j && Utilities.isSpace(s.charCodeAt(i))) {\n      i++;\n    }\n\n    while (i <= j) {\n      if (Utilities.isSpace(s.charCodeAt(i))) {\n        t += \" \";\n\n        while (i <= j && Utilities.isSpace(s.charCodeAt(i))) {\n          i++;\n        }\n      } else {\n        t += s.charAt(i);\n        i++;\n      }\n    }\n\n    return new XString(t);\n  };\n\n  Functions.translate = function (c, eValue, eFrom, eTo) {\n    if (arguments.length != 4) {\n      throw new Error(\"Function translate expects (string, string, string)\");\n    }\n\n    var value = eValue.evaluate(c).stringValue();\n    var from = eFrom.evaluate(c).stringValue();\n    var to = eTo.evaluate(c).stringValue();\n    var cMap = reduce(function (acc, ch, i) {\n      if (!(ch in acc)) {\n        acc[ch] = i > to.length ? '' : to[i];\n      }\n\n      return acc;\n    }, {}, from);\n    var t = join('', map(function (ch) {\n      return ch in cMap ? cMap[ch] : ch;\n    }, value));\n    return new XString(t);\n  };\n\n  Functions.boolean_ = function () {\n    var c = arguments[0];\n\n    if (arguments.length != 2) {\n      throw new Error(\"Function boolean expects (object)\");\n    }\n\n    return arguments[1].evaluate(c).bool();\n  };\n\n  Functions.not = function (c, eValue) {\n    if (arguments.length != 2) {\n      throw new Error(\"Function not expects (object)\");\n    }\n\n    return eValue.evaluate(c).bool().not();\n  };\n\n  Functions.true_ = function () {\n    if (arguments.length != 1) {\n      throw new Error(\"Function true expects ()\");\n    }\n\n    return XBoolean.true_;\n  };\n\n  Functions.false_ = function () {\n    if (arguments.length != 1) {\n      throw new Error(\"Function false expects ()\");\n    }\n\n    return XBoolean.false_;\n  };\n\n  Functions.lang = function () {\n    var c = arguments[0];\n\n    if (arguments.length != 2) {\n      throw new Error(\"Function lang expects (string)\");\n    }\n\n    var lang;\n\n    for (var n = c.contextNode; n != null && n.nodeType != 9\n    /*Node.DOCUMENT_NODE*/\n    ; n = n.parentNode) {\n      var a = n.getAttributeNS(XPath.XML_NAMESPACE_URI, \"lang\");\n\n      if (a != null) {\n        lang = String(a);\n        break;\n      }\n    }\n\n    if (lang == null) {\n      return XBoolean.false_;\n    }\n\n    var s = arguments[1].evaluate(c).stringValue();\n    return new XBoolean(lang.substring(0, s.length) == s && (lang.length == s.length || lang.charAt(s.length) == '-'));\n  };\n\n  Functions.number = function () {\n    var c = arguments[0];\n\n    if (!(arguments.length == 1 || arguments.length == 2)) {\n      throw new Error(\"Function number expects (object?)\");\n    }\n\n    if (arguments.length == 1) {\n      return new XNumber(XNodeSet.prototype.stringForNode(c.contextNode));\n    }\n\n    return arguments[1].evaluate(c).number();\n  };\n\n  Functions.sum = function () {\n    var c = arguments[0];\n    var ns;\n\n    if (arguments.length != 2 || !Utilities.instance_of(ns = arguments[1].evaluate(c), XNodeSet)) {\n      throw new Error(\"Function sum expects (node-set)\");\n    }\n\n    ns = ns.toUnsortedArray();\n    var n = 0;\n\n    for (var i = 0; i < ns.length; i++) {\n      n += new XNumber(XNodeSet.prototype.stringForNode(ns[i])).numberValue();\n    }\n\n    return new XNumber(n);\n  };\n\n  Functions.floor = function () {\n    var c = arguments[0];\n\n    if (arguments.length != 2) {\n      throw new Error(\"Function floor expects (number)\");\n    }\n\n    return new XNumber(Math.floor(arguments[1].evaluate(c).numberValue()));\n  };\n\n  Functions.ceiling = function () {\n    var c = arguments[0];\n\n    if (arguments.length != 2) {\n      throw new Error(\"Function ceiling expects (number)\");\n    }\n\n    return new XNumber(Math.ceil(arguments[1].evaluate(c).numberValue()));\n  };\n\n  Functions.round = function () {\n    var c = arguments[0];\n\n    if (arguments.length != 2) {\n      throw new Error(\"Function round expects (number)\");\n    }\n\n    return new XNumber(Math.round(arguments[1].evaluate(c).numberValue()));\n  }; // Utilities /////////////////////////////////////////////////////////////////\n\n\n  var Utilities = new Object();\n\n  Utilities.isAttribute = function (val) {\n    return val && (val.nodeType === 2 || val.ownerElement);\n  };\n\n  Utilities.splitQName = function (qn) {\n    var i = qn.indexOf(\":\");\n\n    if (i == -1) {\n      return [null, qn];\n    }\n\n    return [qn.substring(0, i), qn.substring(i + 1)];\n  };\n\n  Utilities.resolveQName = function (qn, nr, n, useDefault) {\n    var parts = Utilities.splitQName(qn);\n\n    if (parts[0] != null) {\n      parts[0] = nr.getNamespace(parts[0], n);\n    } else {\n      if (useDefault) {\n        parts[0] = nr.getNamespace(\"\", n);\n\n        if (parts[0] == null) {\n          parts[0] = \"\";\n        }\n      } else {\n        parts[0] = \"\";\n      }\n    }\n\n    return parts;\n  };\n\n  Utilities.isSpace = function (c) {\n    return c == 0x9 || c == 0xd || c == 0xa || c == 0x20;\n  };\n\n  Utilities.isLetter = function (c) {\n    return c >= 0x0041 && c <= 0x005A || c >= 0x0061 && c <= 0x007A || c >= 0x00C0 && c <= 0x00D6 || c >= 0x00D8 && c <= 0x00F6 || c >= 0x00F8 && c <= 0x00FF || c >= 0x0100 && c <= 0x0131 || c >= 0x0134 && c <= 0x013E || c >= 0x0141 && c <= 0x0148 || c >= 0x014A && c <= 0x017E || c >= 0x0180 && c <= 0x01C3 || c >= 0x01CD && c <= 0x01F0 || c >= 0x01F4 && c <= 0x01F5 || c >= 0x01FA && c <= 0x0217 || c >= 0x0250 && c <= 0x02A8 || c >= 0x02BB && c <= 0x02C1 || c == 0x0386 || c >= 0x0388 && c <= 0x038A || c == 0x038C || c >= 0x038E && c <= 0x03A1 || c >= 0x03A3 && c <= 0x03CE || c >= 0x03D0 && c <= 0x03D6 || c == 0x03DA || c == 0x03DC || c == 0x03DE || c == 0x03E0 || c >= 0x03E2 && c <= 0x03F3 || c >= 0x0401 && c <= 0x040C || c >= 0x040E && c <= 0x044F || c >= 0x0451 && c <= 0x045C || c >= 0x045E && c <= 0x0481 || c >= 0x0490 && c <= 0x04C4 || c >= 0x04C7 && c <= 0x04C8 || c >= 0x04CB && c <= 0x04CC || c >= 0x04D0 && c <= 0x04EB || c >= 0x04EE && c <= 0x04F5 || c >= 0x04F8 && c <= 0x04F9 || c >= 0x0531 && c <= 0x0556 || c == 0x0559 || c >= 0x0561 && c <= 0x0586 || c >= 0x05D0 && c <= 0x05EA || c >= 0x05F0 && c <= 0x05F2 || c >= 0x0621 && c <= 0x063A || c >= 0x0641 && c <= 0x064A || c >= 0x0671 && c <= 0x06B7 || c >= 0x06BA && c <= 0x06BE || c >= 0x06C0 && c <= 0x06CE || c >= 0x06D0 && c <= 0x06D3 || c == 0x06D5 || c >= 0x06E5 && c <= 0x06E6 || c >= 0x0905 && c <= 0x0939 || c == 0x093D || c >= 0x0958 && c <= 0x0961 || c >= 0x0985 && c <= 0x098C || c >= 0x098F && c <= 0x0990 || c >= 0x0993 && c <= 0x09A8 || c >= 0x09AA && c <= 0x09B0 || c == 0x09B2 || c >= 0x09B6 && c <= 0x09B9 || c >= 0x09DC && c <= 0x09DD || c >= 0x09DF && c <= 0x09E1 || c >= 0x09F0 && c <= 0x09F1 || c >= 0x0A05 && c <= 0x0A0A || c >= 0x0A0F && c <= 0x0A10 || c >= 0x0A13 && c <= 0x0A28 || c >= 0x0A2A && c <= 0x0A30 || c >= 0x0A32 && c <= 0x0A33 || c >= 0x0A35 && c <= 0x0A36 || c >= 0x0A38 && c <= 0x0A39 || c >= 0x0A59 && c <= 0x0A5C || c == 0x0A5E || c >= 0x0A72 && c <= 0x0A74 || c >= 0x0A85 && c <= 0x0A8B || c == 0x0A8D || c >= 0x0A8F && c <= 0x0A91 || c >= 0x0A93 && c <= 0x0AA8 || c >= 0x0AAA && c <= 0x0AB0 || c >= 0x0AB2 && c <= 0x0AB3 || c >= 0x0AB5 && c <= 0x0AB9 || c == 0x0ABD || c == 0x0AE0 || c >= 0x0B05 && c <= 0x0B0C || c >= 0x0B0F && c <= 0x0B10 || c >= 0x0B13 && c <= 0x0B28 || c >= 0x0B2A && c <= 0x0B30 || c >= 0x0B32 && c <= 0x0B33 || c >= 0x0B36 && c <= 0x0B39 || c == 0x0B3D || c >= 0x0B5C && c <= 0x0B5D || c >= 0x0B5F && c <= 0x0B61 || c >= 0x0B85 && c <= 0x0B8A || c >= 0x0B8E && c <= 0x0B90 || c >= 0x0B92 && c <= 0x0B95 || c >= 0x0B99 && c <= 0x0B9A || c == 0x0B9C || c >= 0x0B9E && c <= 0x0B9F || c >= 0x0BA3 && c <= 0x0BA4 || c >= 0x0BA8 && c <= 0x0BAA || c >= 0x0BAE && c <= 0x0BB5 || c >= 0x0BB7 && c <= 0x0BB9 || c >= 0x0C05 && c <= 0x0C0C || c >= 0x0C0E && c <= 0x0C10 || c >= 0x0C12 && c <= 0x0C28 || c >= 0x0C2A && c <= 0x0C33 || c >= 0x0C35 && c <= 0x0C39 || c >= 0x0C60 && c <= 0x0C61 || c >= 0x0C85 && c <= 0x0C8C || c >= 0x0C8E && c <= 0x0C90 || c >= 0x0C92 && c <= 0x0CA8 || c >= 0x0CAA && c <= 0x0CB3 || c >= 0x0CB5 && c <= 0x0CB9 || c == 0x0CDE || c >= 0x0CE0 && c <= 0x0CE1 || c >= 0x0D05 && c <= 0x0D0C || c >= 0x0D0E && c <= 0x0D10 || c >= 0x0D12 && c <= 0x0D28 || c >= 0x0D2A && c <= 0x0D39 || c >= 0x0D60 && c <= 0x0D61 || c >= 0x0E01 && c <= 0x0E2E || c == 0x0E30 || c >= 0x0E32 && c <= 0x0E33 || c >= 0x0E40 && c <= 0x0E45 || c >= 0x0E81 && c <= 0x0E82 || c == 0x0E84 || c >= 0x0E87 && c <= 0x0E88 || c == 0x0E8A || c == 0x0E8D || c >= 0x0E94 && c <= 0x0E97 || c >= 0x0E99 && c <= 0x0E9F || c >= 0x0EA1 && c <= 0x0EA3 || c == 0x0EA5 || c == 0x0EA7 || c >= 0x0EAA && c <= 0x0EAB || c >= 0x0EAD && c <= 0x0EAE || c == 0x0EB0 || c >= 0x0EB2 && c <= 0x0EB3 || c == 0x0EBD || c >= 0x0EC0 && c <= 0x0EC4 || c >= 0x0F40 && c <= 0x0F47 || c >= 0x0F49 && c <= 0x0F69 || c >= 0x10A0 && c <= 0x10C5 || c >= 0x10D0 && c <= 0x10F6 || c == 0x1100 || c >= 0x1102 && c <= 0x1103 || c >= 0x1105 && c <= 0x1107 || c == 0x1109 || c >= 0x110B && c <= 0x110C || c >= 0x110E && c <= 0x1112 || c == 0x113C || c == 0x113E || c == 0x1140 || c == 0x114C || c == 0x114E || c == 0x1150 || c >= 0x1154 && c <= 0x1155 || c == 0x1159 || c >= 0x115F && c <= 0x1161 || c == 0x1163 || c == 0x1165 || c == 0x1167 || c == 0x1169 || c >= 0x116D && c <= 0x116E || c >= 0x1172 && c <= 0x1173 || c == 0x1175 || c == 0x119E || c == 0x11A8 || c == 0x11AB || c >= 0x11AE && c <= 0x11AF || c >= 0x11B7 && c <= 0x11B8 || c == 0x11BA || c >= 0x11BC && c <= 0x11C2 || c == 0x11EB || c == 0x11F0 || c == 0x11F9 || c >= 0x1E00 && c <= 0x1E9B || c >= 0x1EA0 && c <= 0x1EF9 || c >= 0x1F00 && c <= 0x1F15 || c >= 0x1F18 && c <= 0x1F1D || c >= 0x1F20 && c <= 0x1F45 || c >= 0x1F48 && c <= 0x1F4D || c >= 0x1F50 && c <= 0x1F57 || c == 0x1F59 || c == 0x1F5B || c == 0x1F5D || c >= 0x1F5F && c <= 0x1F7D || c >= 0x1F80 && c <= 0x1FB4 || c >= 0x1FB6 && c <= 0x1FBC || c == 0x1FBE || c >= 0x1FC2 && c <= 0x1FC4 || c >= 0x1FC6 && c <= 0x1FCC || c >= 0x1FD0 && c <= 0x1FD3 || c >= 0x1FD6 && c <= 0x1FDB || c >= 0x1FE0 && c <= 0x1FEC || c >= 0x1FF2 && c <= 0x1FF4 || c >= 0x1FF6 && c <= 0x1FFC || c == 0x2126 || c >= 0x212A && c <= 0x212B || c == 0x212E || c >= 0x2180 && c <= 0x2182 || c >= 0x3041 && c <= 0x3094 || c >= 0x30A1 && c <= 0x30FA || c >= 0x3105 && c <= 0x312C || c >= 0xAC00 && c <= 0xD7A3 || c >= 0x4E00 && c <= 0x9FA5 || c == 0x3007 || c >= 0x3021 && c <= 0x3029;\n  };\n\n  Utilities.isNCNameChar = function (c) {\n    return c >= 0x0030 && c <= 0x0039 || c >= 0x0660 && c <= 0x0669 || c >= 0x06F0 && c <= 0x06F9 || c >= 0x0966 && c <= 0x096F || c >= 0x09E6 && c <= 0x09EF || c >= 0x0A66 && c <= 0x0A6F || c >= 0x0AE6 && c <= 0x0AEF || c >= 0x0B66 && c <= 0x0B6F || c >= 0x0BE7 && c <= 0x0BEF || c >= 0x0C66 && c <= 0x0C6F || c >= 0x0CE6 && c <= 0x0CEF || c >= 0x0D66 && c <= 0x0D6F || c >= 0x0E50 && c <= 0x0E59 || c >= 0x0ED0 && c <= 0x0ED9 || c >= 0x0F20 && c <= 0x0F29 || c == 0x002E || c == 0x002D || c == 0x005F || Utilities.isLetter(c) || c >= 0x0300 && c <= 0x0345 || c >= 0x0360 && c <= 0x0361 || c >= 0x0483 && c <= 0x0486 || c >= 0x0591 && c <= 0x05A1 || c >= 0x05A3 && c <= 0x05B9 || c >= 0x05BB && c <= 0x05BD || c == 0x05BF || c >= 0x05C1 && c <= 0x05C2 || c == 0x05C4 || c >= 0x064B && c <= 0x0652 || c == 0x0670 || c >= 0x06D6 && c <= 0x06DC || c >= 0x06DD && c <= 0x06DF || c >= 0x06E0 && c <= 0x06E4 || c >= 0x06E7 && c <= 0x06E8 || c >= 0x06EA && c <= 0x06ED || c >= 0x0901 && c <= 0x0903 || c == 0x093C || c >= 0x093E && c <= 0x094C || c == 0x094D || c >= 0x0951 && c <= 0x0954 || c >= 0x0962 && c <= 0x0963 || c >= 0x0981 && c <= 0x0983 || c == 0x09BC || c == 0x09BE || c == 0x09BF || c >= 0x09C0 && c <= 0x09C4 || c >= 0x09C7 && c <= 0x09C8 || c >= 0x09CB && c <= 0x09CD || c == 0x09D7 || c >= 0x09E2 && c <= 0x09E3 || c == 0x0A02 || c == 0x0A3C || c == 0x0A3E || c == 0x0A3F || c >= 0x0A40 && c <= 0x0A42 || c >= 0x0A47 && c <= 0x0A48 || c >= 0x0A4B && c <= 0x0A4D || c >= 0x0A70 && c <= 0x0A71 || c >= 0x0A81 && c <= 0x0A83 || c == 0x0ABC || c >= 0x0ABE && c <= 0x0AC5 || c >= 0x0AC7 && c <= 0x0AC9 || c >= 0x0ACB && c <= 0x0ACD || c >= 0x0B01 && c <= 0x0B03 || c == 0x0B3C || c >= 0x0B3E && c <= 0x0B43 || c >= 0x0B47 && c <= 0x0B48 || c >= 0x0B4B && c <= 0x0B4D || c >= 0x0B56 && c <= 0x0B57 || c >= 0x0B82 && c <= 0x0B83 || c >= 0x0BBE && c <= 0x0BC2 || c >= 0x0BC6 && c <= 0x0BC8 || c >= 0x0BCA && c <= 0x0BCD || c == 0x0BD7 || c >= 0x0C01 && c <= 0x0C03 || c >= 0x0C3E && c <= 0x0C44 || c >= 0x0C46 && c <= 0x0C48 || c >= 0x0C4A && c <= 0x0C4D || c >= 0x0C55 && c <= 0x0C56 || c >= 0x0C82 && c <= 0x0C83 || c >= 0x0CBE && c <= 0x0CC4 || c >= 0x0CC6 && c <= 0x0CC8 || c >= 0x0CCA && c <= 0x0CCD || c >= 0x0CD5 && c <= 0x0CD6 || c >= 0x0D02 && c <= 0x0D03 || c >= 0x0D3E && c <= 0x0D43 || c >= 0x0D46 && c <= 0x0D48 || c >= 0x0D4A && c <= 0x0D4D || c == 0x0D57 || c == 0x0E31 || c >= 0x0E34 && c <= 0x0E3A || c >= 0x0E47 && c <= 0x0E4E || c == 0x0EB1 || c >= 0x0EB4 && c <= 0x0EB9 || c >= 0x0EBB && c <= 0x0EBC || c >= 0x0EC8 && c <= 0x0ECD || c >= 0x0F18 && c <= 0x0F19 || c == 0x0F35 || c == 0x0F37 || c == 0x0F39 || c == 0x0F3E || c == 0x0F3F || c >= 0x0F71 && c <= 0x0F84 || c >= 0x0F86 && c <= 0x0F8B || c >= 0x0F90 && c <= 0x0F95 || c == 0x0F97 || c >= 0x0F99 && c <= 0x0FAD || c >= 0x0FB1 && c <= 0x0FB7 || c == 0x0FB9 || c >= 0x20D0 && c <= 0x20DC || c == 0x20E1 || c >= 0x302A && c <= 0x302F || c == 0x3099 || c == 0x309A || c == 0x00B7 || c == 0x02D0 || c == 0x02D1 || c == 0x0387 || c == 0x0640 || c == 0x0E46 || c == 0x0EC6 || c == 0x3005 || c >= 0x3031 && c <= 0x3035 || c >= 0x309D && c <= 0x309E || c >= 0x30FC && c <= 0x30FE;\n  };\n\n  Utilities.coalesceText = function (n) {\n    for (var m = n.firstChild; m != null; m = m.nextSibling) {\n      if (m.nodeType == 3\n      /*Node.TEXT_NODE*/\n      || m.nodeType == 4\n      /*Node.CDATA_SECTION_NODE*/\n      ) {\n          var s = m.nodeValue;\n          var first = m;\n          m = m.nextSibling;\n\n          while (m != null && (m.nodeType == 3\n          /*Node.TEXT_NODE*/\n          || m.nodeType == 4\n          /*Node.CDATA_SECTION_NODE*/\n          )) {\n            s += m.nodeValue;\n            var del = m;\n            m = m.nextSibling;\n            del.parentNode.removeChild(del);\n          }\n\n          if (first.nodeType == 4\n          /*Node.CDATA_SECTION_NODE*/\n          ) {\n              var p = first.parentNode;\n\n              if (first.nextSibling == null) {\n                p.removeChild(first);\n                p.appendChild(p.ownerDocument.createTextNode(s));\n              } else {\n                var next = first.nextSibling;\n                p.removeChild(first);\n                p.insertBefore(p.ownerDocument.createTextNode(s), next);\n              }\n            } else {\n            first.nodeValue = s;\n          }\n\n          if (m == null) {\n            break;\n          }\n        } else if (m.nodeType == 1\n      /*Node.ELEMENT_NODE*/\n      ) {\n          Utilities.coalesceText(m);\n        }\n    }\n  };\n\n  Utilities.instance_of = function (o, c) {\n    while (o != null) {\n      if (o.constructor === c) {\n        return true;\n      }\n\n      if (o === Object) {\n        return false;\n      }\n\n      o = o.constructor.superclass;\n    }\n\n    return false;\n  };\n\n  Utilities.getElementById = function (n, id) {\n    // Note that this does not check the DTD to check for actual\n    // attributes of type ID, so this may be a bit wrong.\n    if (n.nodeType == 1\n    /*Node.ELEMENT_NODE*/\n    ) {\n        if (n.getAttribute(\"id\") == id || n.getAttributeNS(null, \"id\") == id) {\n          return n;\n        }\n      }\n\n    for (var m = n.firstChild; m != null; m = m.nextSibling) {\n      var res = Utilities.getElementById(m, id);\n\n      if (res != null) {\n        return res;\n      }\n    }\n\n    return null;\n  }; // XPathException ////////////////////////////////////////////////////////////\n\n\n  var XPathException = function () {\n    function getMessage(code, exception) {\n      var msg = exception ? \": \" + exception.toString() : \"\";\n\n      switch (code) {\n        case XPathException.INVALID_EXPRESSION_ERR:\n          return \"Invalid expression\" + msg;\n\n        case XPathException.TYPE_ERR:\n          return \"Type error\" + msg;\n      }\n\n      return null;\n    }\n\n    function XPathException(code, error, message) {\n      var err = Error.call(this, getMessage(code, error) || message);\n      err.code = code;\n      err.exception = error;\n      return err;\n    }\n\n    XPathException.prototype = Object.create(Error.prototype);\n    XPathException.prototype.constructor = XPathException;\n    XPathException.superclass = Error;\n\n    XPathException.prototype.toString = function () {\n      return this.message;\n    };\n\n    XPathException.fromMessage = function (message, error) {\n      return new XPathException(null, error, message);\n    };\n\n    XPathException.INVALID_EXPRESSION_ERR = 51;\n    XPathException.TYPE_ERR = 52;\n    return XPathException;\n  }(); // XPathExpression ///////////////////////////////////////////////////////////\n\n\n  XPathExpression.prototype = {};\n  XPathExpression.prototype.constructor = XPathExpression;\n  XPathExpression.superclass = Object.prototype;\n\n  function XPathExpression(e, r, p) {\n    this.xpath = p.parse(e);\n    this.context = new XPathContext();\n    this.context.namespaceResolver = new XPathNSResolverWrapper(r);\n  }\n\n  XPathExpression.getOwnerDocument = function (n) {\n    return n.nodeType === 9\n    /*Node.DOCUMENT_NODE*/\n    ? n : n.ownerDocument;\n  };\n\n  XPathExpression.detectHtmlDom = function (n) {\n    if (!n) {\n      return false;\n    }\n\n    var doc = XPathExpression.getOwnerDocument(n);\n\n    try {\n      return doc.implementation.hasFeature(\"HTML\", \"2.0\");\n    } catch (e) {\n      return true;\n    }\n  };\n\n  XPathExpression.prototype.evaluate = function (n, t, res) {\n    this.context.expressionContextNode = n; // backward compatibility - no reliable way to detect whether the DOM is HTML, but\n    // this library has been using this method up until now, so we will continue to use it\n    // ONLY when using an XPathExpression\n\n    this.context.caseInsensitive = XPathExpression.detectHtmlDom(n);\n    var result = this.xpath.evaluate(this.context);\n    return new XPathResult(result, t);\n  }; // XPathNSResolverWrapper ////////////////////////////////////////////////////\n\n\n  XPathNSResolverWrapper.prototype = {};\n  XPathNSResolverWrapper.prototype.constructor = XPathNSResolverWrapper;\n  XPathNSResolverWrapper.superclass = Object.prototype;\n\n  function XPathNSResolverWrapper(r) {\n    this.xpathNSResolver = r;\n  }\n\n  XPathNSResolverWrapper.prototype.getNamespace = function (prefix, n) {\n    if (this.xpathNSResolver == null) {\n      return null;\n    }\n\n    return this.xpathNSResolver.lookupNamespaceURI(prefix);\n  }; // NodeXPathNSResolver ///////////////////////////////////////////////////////\n\n\n  NodeXPathNSResolver.prototype = {};\n  NodeXPathNSResolver.prototype.constructor = NodeXPathNSResolver;\n  NodeXPathNSResolver.superclass = Object.prototype;\n\n  function NodeXPathNSResolver(n) {\n    this.node = n;\n    this.namespaceResolver = new NamespaceResolver();\n  }\n\n  NodeXPathNSResolver.prototype.lookupNamespaceURI = function (prefix) {\n    return this.namespaceResolver.getNamespace(prefix, this.node);\n  }; // XPathResult ///////////////////////////////////////////////////////////////\n\n\n  XPathResult.prototype = {};\n  XPathResult.prototype.constructor = XPathResult;\n  XPathResult.superclass = Object.prototype;\n\n  function XPathResult(v, t) {\n    if (t == XPathResult.ANY_TYPE) {\n      if (v.constructor === XString) {\n        t = XPathResult.STRING_TYPE;\n      } else if (v.constructor === XNumber) {\n        t = XPathResult.NUMBER_TYPE;\n      } else if (v.constructor === XBoolean) {\n        t = XPathResult.BOOLEAN_TYPE;\n      } else if (v.constructor === XNodeSet) {\n        t = XPathResult.UNORDERED_NODE_ITERATOR_TYPE;\n      }\n    }\n\n    this.resultType = t;\n\n    switch (t) {\n      case XPathResult.NUMBER_TYPE:\n        this.numberValue = v.numberValue();\n        return;\n\n      case XPathResult.STRING_TYPE:\n        this.stringValue = v.stringValue();\n        return;\n\n      case XPathResult.BOOLEAN_TYPE:\n        this.booleanValue = v.booleanValue();\n        return;\n\n      case XPathResult.ANY_UNORDERED_NODE_TYPE:\n      case XPathResult.FIRST_ORDERED_NODE_TYPE:\n        if (v.constructor === XNodeSet) {\n          this.singleNodeValue = v.first();\n          return;\n        }\n\n        break;\n\n      case XPathResult.UNORDERED_NODE_ITERATOR_TYPE:\n      case XPathResult.ORDERED_NODE_ITERATOR_TYPE:\n        if (v.constructor === XNodeSet) {\n          this.invalidIteratorState = false;\n          this.nodes = v.toArray();\n          this.iteratorIndex = 0;\n          return;\n        }\n\n        break;\n\n      case XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE:\n      case XPathResult.ORDERED_NODE_SNAPSHOT_TYPE:\n        if (v.constructor === XNodeSet) {\n          this.nodes = v.toArray();\n          this.snapshotLength = this.nodes.length;\n          return;\n        }\n\n        break;\n    }\n\n    throw new XPathException(XPathException.TYPE_ERR);\n  }\n\n  ;\n\n  XPathResult.prototype.iterateNext = function () {\n    if (this.resultType != XPathResult.UNORDERED_NODE_ITERATOR_TYPE && this.resultType != XPathResult.ORDERED_NODE_ITERATOR_TYPE) {\n      throw new XPathException(XPathException.TYPE_ERR);\n    }\n\n    return this.nodes[this.iteratorIndex++];\n  };\n\n  XPathResult.prototype.snapshotItem = function (i) {\n    if (this.resultType != XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE && this.resultType != XPathResult.ORDERED_NODE_SNAPSHOT_TYPE) {\n      throw new XPathException(XPathException.TYPE_ERR);\n    }\n\n    return this.nodes[i];\n  };\n\n  XPathResult.ANY_TYPE = 0;\n  XPathResult.NUMBER_TYPE = 1;\n  XPathResult.STRING_TYPE = 2;\n  XPathResult.BOOLEAN_TYPE = 3;\n  XPathResult.UNORDERED_NODE_ITERATOR_TYPE = 4;\n  XPathResult.ORDERED_NODE_ITERATOR_TYPE = 5;\n  XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE = 6;\n  XPathResult.ORDERED_NODE_SNAPSHOT_TYPE = 7;\n  XPathResult.ANY_UNORDERED_NODE_TYPE = 8;\n  XPathResult.FIRST_ORDERED_NODE_TYPE = 9; // DOM 3 XPath support ///////////////////////////////////////////////////////\n\n  function installDOM3XPathSupport(doc, p) {\n    doc.createExpression = function (e, r) {\n      try {\n        return new XPathExpression(e, r, p);\n      } catch (e) {\n        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR, e);\n      }\n    };\n\n    doc.createNSResolver = function (n) {\n      return new NodeXPathNSResolver(n);\n    };\n\n    doc.evaluate = function (e, cn, r, t, res) {\n      if (t < 0 || t > 9) {\n        throw {\n          code: 0,\n          toString: function () {\n            return \"Request type not supported\";\n          }\n        };\n      }\n\n      return doc.createExpression(e, r, p).evaluate(cn, t, res);\n    };\n  }\n\n  ; // ---------------------------------------------------------------------------\n  // Install DOM 3 XPath support for the current document.\n\n  try {\n    var shouldInstall = true;\n\n    try {\n      if (document.implementation && document.implementation.hasFeature && document.implementation.hasFeature(\"XPath\", null)) {\n        shouldInstall = false;\n      }\n    } catch (e) {}\n\n    if (shouldInstall) {\n      installDOM3XPathSupport(document, new XPathParser());\n    }\n  } catch (e) {} // ---------------------------------------------------------------------------\n  // exports for node.js\n\n\n  installDOM3XPathSupport(exports, new XPathParser());\n\n  (function () {\n    var parser = new XPathParser();\n    var defaultNSResolver = new NamespaceResolver();\n    var defaultFunctionResolver = new FunctionResolver();\n    var defaultVariableResolver = new VariableResolver();\n\n    function makeNSResolverFromFunction(func) {\n      return {\n        getNamespace: function (prefix, node) {\n          var ns = func(prefix, node);\n          return ns || defaultNSResolver.getNamespace(prefix, node);\n        }\n      };\n    }\n\n    function makeNSResolverFromObject(obj) {\n      return makeNSResolverFromFunction(obj.getNamespace.bind(obj));\n    }\n\n    function makeNSResolverFromMap(map) {\n      return makeNSResolverFromFunction(function (prefix) {\n        return map[prefix];\n      });\n    }\n\n    function makeNSResolver(resolver) {\n      if (resolver && typeof resolver.getNamespace === \"function\") {\n        return makeNSResolverFromObject(resolver);\n      }\n\n      if (typeof resolver === \"function\") {\n        return makeNSResolverFromFunction(resolver);\n      } // assume prefix -> uri mapping\n\n\n      if (typeof resolver === \"object\") {\n        return makeNSResolverFromMap(resolver);\n      }\n\n      return defaultNSResolver;\n    }\n    /** Converts native JavaScript types to their XPath library equivalent */\n\n\n    function convertValue(value) {\n      if (value === null || typeof value === \"undefined\" || value instanceof XString || value instanceof XBoolean || value instanceof XNumber || value instanceof XNodeSet) {\n        return value;\n      }\n\n      switch (typeof value) {\n        case \"string\":\n          return new XString(value);\n\n        case \"boolean\":\n          return new XBoolean(value);\n\n        case \"number\":\n          return new XNumber(value);\n      } // assume node(s)\n\n\n      var ns = new XNodeSet();\n      ns.addArray([].concat(value));\n      return ns;\n    }\n\n    function makeEvaluator(func) {\n      return function (context) {\n        var args = Array.prototype.slice.call(arguments, 1).map(function (arg) {\n          return arg.evaluate(context);\n        });\n        var result = func.apply(this, [].concat(context, args));\n        return convertValue(result);\n      };\n    }\n\n    function makeFunctionResolverFromFunction(func) {\n      return {\n        getFunction: function (name, namespace) {\n          var found = func(name, namespace);\n\n          if (found) {\n            return makeEvaluator(found);\n          }\n\n          return defaultFunctionResolver.getFunction(name, namespace);\n        }\n      };\n    }\n\n    function makeFunctionResolverFromObject(obj) {\n      return makeFunctionResolverFromFunction(obj.getFunction.bind(obj));\n    }\n\n    function makeFunctionResolverFromMap(map) {\n      return makeFunctionResolverFromFunction(function (name) {\n        return map[name];\n      });\n    }\n\n    function makeFunctionResolver(resolver) {\n      if (resolver && typeof resolver.getFunction === \"function\") {\n        return makeFunctionResolverFromObject(resolver);\n      }\n\n      if (typeof resolver === \"function\") {\n        return makeFunctionResolverFromFunction(resolver);\n      } // assume map\n\n\n      if (typeof resolver === \"object\") {\n        return makeFunctionResolverFromMap(resolver);\n      }\n\n      return defaultFunctionResolver;\n    }\n\n    function makeVariableResolverFromFunction(func) {\n      return {\n        getVariable: function (name, namespace) {\n          var value = func(name, namespace);\n          return convertValue(value);\n        }\n      };\n    }\n\n    function makeVariableResolver(resolver) {\n      if (resolver) {\n        if (typeof resolver.getVariable === \"function\") {\n          return makeVariableResolverFromFunction(resolver.getVariable.bind(resolver));\n        }\n\n        if (typeof resolver === \"function\") {\n          return makeVariableResolverFromFunction(resolver);\n        } // assume map\n\n\n        if (typeof resolver === \"object\") {\n          return makeVariableResolverFromFunction(function (name) {\n            return resolver[name];\n          });\n        }\n      }\n\n      return defaultVariableResolver;\n    }\n\n    function copyIfPresent(prop, dest, source) {\n      if (prop in source) {\n        dest[prop] = source[prop];\n      }\n    }\n\n    function makeContext(options) {\n      var context = new XPathContext();\n\n      if (options) {\n        context.namespaceResolver = makeNSResolver(options.namespaces);\n        context.functionResolver = makeFunctionResolver(options.functions);\n        context.variableResolver = makeVariableResolver(options.variables);\n        context.expressionContextNode = options.node;\n        copyIfPresent('allowAnyNamespaceForNoPrefix', context, options);\n        copyIfPresent('isHtml', context, options);\n      } else {\n        context.namespaceResolver = defaultNSResolver;\n      }\n\n      return context;\n    }\n\n    function evaluate(parsedExpression, options) {\n      var context = makeContext(options);\n      return parsedExpression.evaluate(context);\n    }\n\n    var evaluatorPrototype = {\n      evaluate: function (options) {\n        return evaluate(this.expression, options);\n      },\n      evaluateNumber: function (options) {\n        return this.evaluate(options).numberValue();\n      },\n      evaluateString: function (options) {\n        return this.evaluate(options).stringValue();\n      },\n      evaluateBoolean: function (options) {\n        return this.evaluate(options).booleanValue();\n      },\n      evaluateNodeSet: function (options) {\n        return this.evaluate(options).nodeset();\n      },\n      select: function (options) {\n        return this.evaluateNodeSet(options).toArray();\n      },\n      select1: function (options) {\n        return this.select(options)[0];\n      }\n    };\n\n    function parse(xpath) {\n      var parsed = parser.parse(xpath);\n      return Object.create(evaluatorPrototype, {\n        expression: {\n          value: parsed\n        }\n      });\n    }\n\n    exports.parse = parse;\n  })();\n\n  exports.XPath = XPath;\n  exports.XPathParser = XPathParser;\n  exports.XPathResult = XPathResult;\n  exports.Step = Step;\n  exports.NodeTest = NodeTest;\n  exports.BarOperation = BarOperation;\n  exports.NamespaceResolver = NamespaceResolver;\n  exports.FunctionResolver = FunctionResolver;\n  exports.VariableResolver = VariableResolver;\n  exports.Utilities = Utilities;\n  exports.XPathContext = XPathContext;\n  exports.XNodeSet = XNodeSet;\n  exports.XBoolean = XBoolean;\n  exports.XString = XString;\n  exports.XNumber = XNumber; // helper\n\n  exports.select = function (e, doc, single) {\n    return exports.selectWithResolver(e, doc, null, single);\n  };\n\n  exports.useNamespaces = function (mappings) {\n    var resolver = {\n      mappings: mappings || {},\n      lookupNamespaceURI: function (prefix) {\n        return this.mappings[prefix];\n      }\n    };\n    return function (e, doc, single) {\n      return exports.selectWithResolver(e, doc, resolver, single);\n    };\n  };\n\n  exports.selectWithResolver = function (e, doc, resolver, single) {\n    var expression = new XPathExpression(e, resolver, new XPathParser());\n    var type = XPathResult.ANY_TYPE;\n    var result = expression.evaluate(doc, type, null);\n\n    if (result.resultType == XPathResult.STRING_TYPE) {\n      result = result.stringValue;\n    } else if (result.resultType == XPathResult.NUMBER_TYPE) {\n      result = result.numberValue;\n    } else if (result.resultType == XPathResult.BOOLEAN_TYPE) {\n      result = result.booleanValue;\n    } else {\n      result = result.nodes;\n\n      if (single) {\n        result = result[0];\n      }\n    }\n\n    return result;\n  };\n\n  exports.select1 = function (e, doc) {\n    return exports.select(e, doc, true);\n  }; // end non-node wrapper\n\n})(xpath);","map":null,"metadata":{},"sourceType":"script"}